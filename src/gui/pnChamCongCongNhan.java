/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gui;

import dao.BangChamCongSP_DAO;
import dao.BangChamCongTangCa_DAO;
import dao.BangDiemDanhCN_DAO;
import dao.BangLuongCN_DAO;
import dao.BangLuongNV_DAO;
import dao.CongDoan_DAO;
import dao.CongNhan_DAO;
import dao.NgayLamViec_DAO;
import dao.SanPham_DAO;
import entity.BangChamCongSP;
import entity.BangChamCongTangCa;
import entity.BangDiemDanhCN;
import entity.BangLuongCN;
import entity.BangLuongNV;
import entity.BangPhanCong;
import entity.CongDoan;
import entity.NgayLamViec;
import entity.SanPham;
import java.sql.Date;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import java.awt.event.KeyEvent;
import javax.swing.DefaultCellEditor;

/**
 *
 * @author Admin
 */
public class pnChamCongCongNhan extends javax.swing.JPanel {

    /**
     * Creates new form pnChamCongCongNhan
     */
    private DefaultTableModel modelDD;
    private DefaultComboBoxModel modelCaDD;
    private DefaultTableModel modelSP;
    private DefaultComboBoxModel modelCaSP;
    private JComboBox<String> cboDD;
    private TableColumn colDD;

    private CongNhan_DAO congNhan_DAO;
    private BangDiemDanhCN_DAO bangDiemDanhCN_DAO;
    private NgayLamViec_DAO ngayLamViec_DAO;
    private BangChamCongSP_DAO bangChamCongSP_DAO;
    private CongDoan_DAO congDoan_DAO;
    private SanPham_DAO sanPham_DAO;
    private BangChamCongTangCa_DAO bangChamCongTangCa_DAO;
    private BangLuongCN_DAO bangLuongCN_DAO;
    private BangLuongNV_DAO bangLuongNV_DAO;

    private ArrayList<BangDiemDanhCN> dsCN;
    private ArrayList<BangDiemDanhCN> dsCNHienThi;
    private ArrayList<SanPham> dsSP;
    private ArrayList<CongDoan> dsCD;
    private ArrayList<CongDoan> dsTamCD;
    private ArrayList<BangChamCongSP> dsHienThiCCSP;
    private ArrayList<BangChamCongSP> dsCCSP;
    private ArrayList<BangChamCongTangCa> dsTangCaNV;

    private int tabChon;

    public pnChamCongCongNhan() {
        congNhan_DAO = new CongNhan_DAO();
        bangDiemDanhCN_DAO = new BangDiemDanhCN_DAO();
        ngayLamViec_DAO = new NgayLamViec_DAO();
        bangChamCongSP_DAO = new BangChamCongSP_DAO();
        congDoan_DAO = new CongDoan_DAO();
        sanPham_DAO = new SanPham_DAO();
        bangChamCongTangCa_DAO = new BangChamCongTangCa_DAO();
        bangLuongCN_DAO = new BangLuongCN_DAO();
        bangLuongNV_DAO = new BangLuongNV_DAO();

        dsSP = new ArrayList<SanPham>();
        dsCD = new ArrayList<CongDoan>();
        dsTamCD = new ArrayList<CongDoan>();
        dsHienThiCCSP = new ArrayList<BangChamCongSP>();
        dsCNHienThi = new ArrayList<BangDiemDanhCN>();
        dsTangCaNV = new ArrayList<BangChamCongTangCa>();

        cboDD = new JComboBox<String>();
        cboDD.addItem("Có mặt");
        cboDD.addItem("Có phép");
        cboDD.addItem("Không phép");

        initComponents();
        tabChon = tabPane.getSelectedIndex();

        chkNgayLeDD.setEnabled(false);
        btnLuuDD.setEnabled(false);
        tableDD.setEnabled(false);

        btnLuuSP.setEnabled(false);
        tableSP.setEnabled(false);
        btnCCDD.setMnemonic(KeyEvent.VK_N);
        btnSuaDD.setMnemonic(KeyEvent.VK_U);
        btnLuuDD.setMnemonic(KeyEvent.VK_S);
        btnThoatDD.setMnemonic(KeyEvent.VK_F4);
        btnCCSP.setMnemonic(KeyEvent.VK_N);
        btnSuaSP.setMnemonic(KeyEvent.VK_U);
        btnLuuSP.setMnemonic(KeyEvent.VK_S);
        btnThoatSP.setMnemonic(KeyEvent.VK_F4);
        docDDVaoTableDD();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabPane = new javax.swing.JTabbedPane();
        tabDiemDanhCN = new javax.swing.JPanel();
        pnChamCongDiemDanh = new javax.swing.JPanel();
        pnTop = new javax.swing.JPanel();
        lblNgayChamCongDD = new javax.swing.JLabel();
        chkNgayLeDD = new javax.swing.JCheckBox();
        lblTimTenDD = new javax.swing.JLabel();
        txtTimTenCNDD = new javax.swing.JTextField();
        lblMaCCDD = new javax.swing.JLabel();
        txtTimMaCNDD = new javax.swing.JTextField();
        dateDD = new datechooser.beans.DateChooserCombo();
        pnMid = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableDD = new javax.swing.JTable();
        btnLuuDD = new javax.swing.JButton();
        btnCCDD = new javax.swing.JButton();
        btnSuaDD = new javax.swing.JButton();
        btnThoatDD = new javax.swing.JButton();
        tabChamCongSP = new javax.swing.JPanel();
        pnChamCongSanPham = new javax.swing.JPanel();
        pnTopSP = new javax.swing.JPanel();
        lblNgayChamCongSP = new javax.swing.JLabel();
        lblMaCCSP = new javax.swing.JLabel();
        txtTimMaCCSP = new javax.swing.JTextField();
        cboCaLamSP = new javax.swing.JComboBox<>();
        lblCaLamSP = new javax.swing.JLabel();
        lblTimTenSP = new javax.swing.JLabel();
        txtTimTenCCSP = new javax.swing.JTextField();
        dateNgayCCSP = new datechooser.beans.DateChooserCombo();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cboCD = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        txtMaSP = new javax.swing.JTextField();
        cboSP = new javax.swing.JComboBox<>();
        pnMidSP = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableSP = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        btnLuuSP = new javax.swing.JButton();
        btnCCSP = new javax.swing.JButton();
        btnSuaSP = new javax.swing.JButton();
        btnThoatSP = new javax.swing.JButton();
        pnBot = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(209, 209, 209));
        setPreferredSize(new java.awt.Dimension(1310, 755));

        tabPane.setPreferredSize(new java.awt.Dimension(900, 520));
        tabPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabPaneMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tabPaneMousePressed(evt);
            }
        });

        tabDiemDanhCN.setPreferredSize(new java.awt.Dimension(900, 447));

        pnChamCongDiemDanh.setPreferredSize(new java.awt.Dimension(1284, 600));

        pnTop.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        pnTop.setPreferredSize(new java.awt.Dimension(1290, 70));

        lblNgayChamCongDD.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblNgayChamCongDD.setText("Ngày chấm công:");

        chkNgayLeDD.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        chkNgayLeDD.setText("Ngày lễ");
        chkNgayLeDD.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkNgayLeDDItemStateChanged(evt);
            }
        });

        lblTimTenDD.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblTimTenDD.setText("Tìm tên công nhân:");

        txtTimTenCNDD.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTimTenCNDDKeyReleased(evt);
            }
        });

        lblMaCCDD.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblMaCCDD.setText("Mã chấm công công nhân:");

        txtTimMaCNDD.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtTimMaCNDD.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTimMaCNDDKeyReleased(evt);
            }
        });

        dateDD.setCalendarPreferredSize(new java.awt.Dimension(330, 220));
        dateDD.setLocale(new java.util.Locale("vi", "VN", ""));
        dateDD.addSelectionChangedListener(new datechooser.events.SelectionChangedListener() {
            public void onSelectionChange(datechooser.events.SelectionChangedEvent evt) {
                dateDDOnSelectionChange(evt);
            }
        });

        javax.swing.GroupLayout pnTopLayout = new javax.swing.GroupLayout(pnTop);
        pnTop.setLayout(pnTopLayout);
        pnTopLayout.setHorizontalGroup(
            pnTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTopLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNgayChamCongDD)
                    .addComponent(lblMaCCDD))
                .addGap(0, 0, 0)
                .addGroup(pnTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateDD, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTimMaCNDD, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(55, 55, 55)
                .addGroup(pnTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkNgayLeDD, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTimTenDD))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTimTenCNDD, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );
        pnTopLayout.setVerticalGroup(
            pnTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTopLayout.createSequentialGroup()
                .addGroup(pnTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnTopLayout.createSequentialGroup()
                        .addComponent(chkNgayLeDD)
                        .addGap(10, 10, 10)
                        .addGroup(pnTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTimTenDD)
                            .addComponent(txtTimTenCNDD, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnTopLayout.createSequentialGroup()
                        .addGroup(pnTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnTopLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lblNgayChamCongDD, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(dateDD, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(pnTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMaCCDD, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTimMaCNDD, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        pnMid.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Bảng chấm công điểm danh", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        pnMid.setPreferredSize(new java.awt.Dimension(1280, 580));

        modelDD = new DefaultTableModel(new String [] {
            "Mã chấm công","Mã công nhân", "Họ tên","Điểm danh", "Phạt", "Ghi chú"
        }, 0){

            boolean[] canEdit = new boolean[]{
                false, false, false, true,true,true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };
        tableDD.setModel(modelDD);
        colDD = tableDD.getColumnModel().getColumn(3);
        colDD.setCellEditor(new DefaultCellEditor(cboDD));

        tableDD.setRowHeight(20);
        jScrollPane1.setViewportView(tableDD);

        javax.swing.GroupLayout pnMidLayout = new javax.swing.GroupLayout(pnMid);
        pnMid.setLayout(pnMidLayout);
        pnMidLayout.setHorizontalGroup(
            pnMidLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnMidLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        pnMidLayout.setVerticalGroup(
            pnMidLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnMidLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnLuuDD.setBackground(new java.awt.Color(255, 204, 204));
        btnLuuDD.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        btnLuuDD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/diskette.png"))); // NOI18N
        btnLuuDD.setText("Lưu(Alt+S)");
        btnLuuDD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLuuDDActionPerformed(evt);
            }
        });

        btnCCDD.setBackground(new java.awt.Color(255, 204, 204));
        btnCCDD.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        btnCCDD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/editing.png"))); // NOI18N
        btnCCDD.setText("Chấm công(Alt+N)");
        btnCCDD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCCDDActionPerformed(evt);
            }
        });

        btnSuaDD.setBackground(new java.awt.Color(255, 204, 204));
        btnSuaDD.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        btnSuaDD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/eraser.png"))); // NOI18N
        btnSuaDD.setText("Sửa(Alt+U)");
        btnSuaDD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaDDActionPerformed(evt);
            }
        });

        btnThoatDD.setBackground(new java.awt.Color(255, 204, 204));
        btnThoatDD.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        btnThoatDD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/logout.png"))); // NOI18N
        btnThoatDD.setText("Thoát(Alt+F4)");
        btnThoatDD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThoatDDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnChamCongDiemDanhLayout = new javax.swing.GroupLayout(pnChamCongDiemDanh);
        pnChamCongDiemDanh.setLayout(pnChamCongDiemDanhLayout);
        pnChamCongDiemDanhLayout.setHorizontalGroup(
            pnChamCongDiemDanhLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnChamCongDiemDanhLayout.createSequentialGroup()
                .addGap(224, 224, 224)
                .addComponent(pnTop, javax.swing.GroupLayout.PREFERRED_SIZE, 813, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(260, Short.MAX_VALUE))
            .addGroup(pnChamCongDiemDanhLayout.createSequentialGroup()
                .addComponent(pnMid, javax.swing.GroupLayout.DEFAULT_SIZE, 1291, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnChamCongDiemDanhLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCCDD, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnLuuDD, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSuaDD, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnThoatDD, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(76, 76, 76))
        );
        pnChamCongDiemDanhLayout.setVerticalGroup(
            pnChamCongDiemDanhLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnChamCongDiemDanhLayout.createSequentialGroup()
                .addComponent(pnTop, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnMid, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnChamCongDiemDanhLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnThoatDD, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSuaDD, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLuuDD, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCCDD, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout tabDiemDanhCNLayout = new javax.swing.GroupLayout(tabDiemDanhCN);
        tabDiemDanhCN.setLayout(tabDiemDanhCNLayout);
        tabDiemDanhCNLayout.setHorizontalGroup(
            tabDiemDanhCNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabDiemDanhCNLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnChamCongDiemDanh, javax.swing.GroupLayout.DEFAULT_SIZE, 1297, Short.MAX_VALUE)
                .addContainerGap())
        );
        tabDiemDanhCNLayout.setVerticalGroup(
            tabDiemDanhCNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabDiemDanhCNLayout.createSequentialGroup()
                .addComponent(pnChamCongDiemDanh, javax.swing.GroupLayout.PREFERRED_SIZE, 646, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        tabPane.addTab("Chấm công điểm danh", tabDiemDanhCN);

        tabChamCongSP.setPreferredSize(new java.awt.Dimension(951, 447));

        pnChamCongSanPham.setPreferredSize(new java.awt.Dimension(900, 722));

        pnTopSP.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lblNgayChamCongSP.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblNgayChamCongSP.setText("Ngày chấm công:");

        lblMaCCSP.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblMaCCSP.setText("Mã chấm công công nhân:");

        txtTimMaCCSP.setEditable(true);
        txtTimMaCCSP.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtTimMaCCSP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTimMaCCSPKeyReleased(evt);
            }
        });

        cboCaLamSP.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ca 1", "Ca 2", "Ca 3" }));
        cboCaLamSP.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboCaLamSPItemStateChanged(evt);
            }
        });

        lblCaLamSP.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblCaLamSP.setText("Ca làm:");

        lblTimTenSP.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblTimTenSP.setText("Tìm tên công nhân:");

        txtTimTenCCSP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTimTenCCSPKeyReleased(evt);
            }
        });

        dateNgayCCSP.setCalendarPreferredSize(new java.awt.Dimension(330, 220));
        dateNgayCCSP.setLocale(new java.util.Locale("vi", "VN", ""));
        dateNgayCCSP.addSelectionChangedListener(new datechooser.events.SelectionChangedListener() {
            public void onSelectionChange(datechooser.events.SelectionChangedEvent evt) {
                dateNgayCCSPOnSelectionChange(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        jLabel2.setText("Mã sản phẩm:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        jLabel3.setText("Sản phẩm:");

        cboCD.addItem("Tất cả");
        cboCD.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboCDItemStateChanged(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        jLabel4.setText("Công đoạn:");

        cboSP.addItem("Tất cả");
        cboSP.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboSPItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout pnTopSPLayout = new javax.swing.GroupLayout(pnTopSP);
        pnTopSP.setLayout(pnTopSPLayout);
        pnTopSPLayout.setHorizontalGroup(
            pnTopSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTopSPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnTopSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMaCCSP)
                    .addComponent(lblNgayChamCongSP))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnTopSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtTimMaCCSP, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateNgayCCSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(pnTopSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnTopSPLayout.createSequentialGroup()
                        .addComponent(lblCaLamSP)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboCaLamSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMaSP, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboSP, 0, 184, Short.MAX_VALUE))
                    .addGroup(pnTopSPLayout.createSequentialGroup()
                        .addComponent(lblTimTenSP)
                        .addGap(18, 18, 18)
                        .addComponent(txtTimTenCCSP, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboCD, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnTopSPLayout.setVerticalGroup(
            pnTopSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTopSPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnTopSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnTopSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblNgayChamCongSP, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnTopSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCaLamSP)
                            .addComponent(cboCaLamSP, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMaSP, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboSP, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(dateNgayCCSP, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnTopSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMaCCSP, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTimMaCCSP, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTimTenSP)
                    .addComponent(txtTimTenCCSP, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(cboCD, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pnMidSP.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Bảng chấm công sản phẩm", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        pnMidSP.setPreferredSize(new java.awt.Dimension(1310, 600));

        modelSP=new DefaultTableModel( new String [] {
            "Mã chấm công","Mã công nhân", "Họ tên","Sản phẩm", "Công đoạn", "Số lượng sản phẩm", "Phạt", "Ghi chú"
        }, 0){
            boolean[] canEdit = new boolean[]{
                false, false, false,false, false, true,true,true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };
        tableSP.setModel(modelSP);
        tableSP.setRowHeight(20);
        jScrollPane2.setViewportView(tableSP);

        javax.swing.GroupLayout pnMidSPLayout = new javax.swing.GroupLayout(pnMidSP);
        pnMidSP.setLayout(pnMidSPLayout);
        pnMidSPLayout.setHorizontalGroup(
            pnMidSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnMidSPLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        pnMidSPLayout.setVerticalGroup(
            pnMidSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnMidSPLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnLuuSP.setBackground(new java.awt.Color(255, 204, 204));
        btnLuuSP.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        btnLuuSP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/diskette.png"))); // NOI18N
        btnLuuSP.setText("Lưu(Alt+S)");
        btnLuuSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLuuSPActionPerformed(evt);
            }
        });

        btnCCSP.setBackground(new java.awt.Color(255, 204, 204));
        btnCCSP.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        btnCCSP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/editing.png"))); // NOI18N
        btnCCSP.setText("Chấm công(Alt+N)");
        btnCCSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCCSPActionPerformed(evt);
            }
        });

        btnSuaSP.setBackground(new java.awt.Color(255, 204, 204));
        btnSuaSP.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        btnSuaSP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/eraser.png"))); // NOI18N
        btnSuaSP.setText("Sửa(Alt+U)");
        btnSuaSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaSPActionPerformed(evt);
            }
        });

        btnThoatSP.setBackground(new java.awt.Color(255, 204, 204));
        btnThoatSP.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        btnThoatSP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/logout.png"))); // NOI18N
        btnThoatSP.setText("Thoát(Alt+F4)");
        btnThoatSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThoatSPActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(595, Short.MAX_VALUE)
                .addComponent(btnCCSP, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnLuuSP, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSuaSP, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(btnThoatSP, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLuuSP, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCCSP, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSuaSP, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnThoatSP, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnChamCongSanPhamLayout = new javax.swing.GroupLayout(pnChamCongSanPham);
        pnChamCongSanPham.setLayout(pnChamCongSanPhamLayout);
        pnChamCongSanPhamLayout.setHorizontalGroup(
            pnChamCongSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnChamCongSanPhamLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 58, Short.MAX_VALUE))
            .addGroup(pnChamCongSanPhamLayout.createSequentialGroup()
                .addGap(135, 135, 135)
                .addComponent(pnTopSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnChamCongSanPhamLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnMidSP, javax.swing.GroupLayout.DEFAULT_SIZE, 1297, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnChamCongSanPhamLayout.setVerticalGroup(
            pnChamCongSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnChamCongSanPhamLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(pnTopSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnMidSP, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout tabChamCongSPLayout = new javax.swing.GroupLayout(tabChamCongSP);
        tabChamCongSP.setLayout(tabChamCongSPLayout);
        tabChamCongSPLayout.setHorizontalGroup(
            tabChamCongSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnChamCongSanPham, javax.swing.GroupLayout.DEFAULT_SIZE, 1309, Short.MAX_VALUE)
        );
        tabChamCongSPLayout.setVerticalGroup(
            tabChamCongSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabChamCongSPLayout.createSequentialGroup()
                .addComponent(pnChamCongSanPham, javax.swing.GroupLayout.PREFERRED_SIZE, 680, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        tabPane.addTab("Chấm công sản phẩm", tabChamCongSP);

        pnBot.setBackground(new java.awt.Color(255, 204, 204));
        pnBot.setPreferredSize(new java.awt.Dimension(110, 34));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Chấm công công nhân");

        javax.swing.GroupLayout pnBotLayout = new javax.swing.GroupLayout(pnBot);
        pnBot.setLayout(pnBotLayout);
        pnBotLayout.setHorizontalGroup(
            pnBotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnBotLayout.createSequentialGroup()
                .addGap(559, 559, 559)
                .addComponent(jLabel1)
                .addContainerGap(559, Short.MAX_VALUE))
        );
        pnBotLayout.setVerticalGroup(
            pnBotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnBotLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 1309, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnBot, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 1309, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(pnBot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabPane, javax.swing.GroupLayout.DEFAULT_SIZE, 715, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnLuuSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLuuSPActionPerformed
        tableSP.editCellAt(-1, -1);
        if (modelSP.getRowCount() == 0) {
            sh_Mes("Không có dữ liệu", null);
            return;
        }
        int opt;
        if (btnCCSP.getText().equalsIgnoreCase("Hủy(Alt+N)")) {
            opt = JOptionPane.showConfirmDialog(null, "Bạn muốn lưu chấm công", "Xác nhận", JOptionPane.YES_NO_OPTION);
            if (opt == JOptionPane.YES_OPTION) {
                chamCongSP();
            }
        } else {
            opt = JOptionPane.showConfirmDialog(null, "Bạn muốn lưu chấm công đã sửa", "Xác nhận", JOptionPane.YES_NO_OPTION);
            if (opt == JOptionPane.YES_OPTION) {
                suaChamCongSP();
            }
        }
    }//GEN-LAST:event_btnLuuSPActionPerformed

    private void btnCCDDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCCDDActionPerformed
        tableDD.editCellAt(-1, -1);
        if (btnCCDD.getText().equalsIgnoreCase("Chấm công(Alt+N)")) {
            moKhoaCtrlDD(false);
            btnLuuDD.setEnabled(true);
            btnCCDD.setEnabled(true);
            btnCCDD.setText("Hủy(Alt+N)");
            ktraNgayDD();
            xoaDLTableDD();
            docCNVaoTableDD();
        } else {
            moKhoaCtrlDD(true);
            btnLuuDD.setEnabled(false);
            btnCCDD.setText("Chấm công(Alt+N)");
            xoaDLTableDD();
            docDDVaoTableDD();
        }
    }//GEN-LAST:event_btnCCDDActionPerformed

    private void btnSuaDDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaDDActionPerformed
        tableDD.editCellAt(-1, -1);
        if (btnSuaDD.getText().equalsIgnoreCase("Sửa(Alt+U)")) {
            moKhoaCtrlDD(false);
            btnLuuDD.setEnabled(true);
            btnSuaDD.setEnabled(true);
            btnSuaDD.setText("Hủy(Alt+U)");
        } else {
            moKhoaCtrlDD(true);
            btnLuuDD.setEnabled(false);
            btnSuaDD.setText("Sửa(Alt+U)");
            xoaDLTableDD();
            docDDVaoTableDD();
        }
    }//GEN-LAST:event_btnSuaDDActionPerformed

    private void btnLuuDDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLuuDDActionPerformed
        tableDD.editCellAt(-1, -1);
        if (modelDD.getRowCount() == 0) {
            sh_Mes("Không có dữ liệu", null);
            return;
        }
        int opt;
        if (btnCCDD.getText().equalsIgnoreCase("Hủy(Alt+N)")) {
            opt = JOptionPane.showConfirmDialog(null, "Bạn muốn lưu chấm công", "Xác nhận", JOptionPane.YES_NO_OPTION);
            if (opt == JOptionPane.YES_OPTION) {
                chamCongDDCN();
            }
        } else {
            opt = JOptionPane.showConfirmDialog(null, "Bạn muốn lưu chấm công đã sửa", "Xác nhận", JOptionPane.YES_NO_OPTION);
            if (opt == JOptionPane.YES_OPTION) {
                suaChamCongDDCN();
            }
        }
    }//GEN-LAST:event_btnLuuDDActionPerformed

    private void dateDDOnSelectionChange(datechooser.events.SelectionChangedEvent evt) {//GEN-FIRST:event_dateDDOnSelectionChange
        txtTimMaCNDD.setText("");
        txtTimTenCNDD.setText("");
        if (btnCCDD.getText().equalsIgnoreCase("Hủy(Alt+N)")) {
            if (ktraNgayDD()) {
                xoaDLTableDD();
                docCNVaoTableDD();
            }
            return;
        }
        xoaDLTableDD();
        docDDVaoTableDD();
    }//GEN-LAST:event_dateDDOnSelectionChange

    private void btnThoatDDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThoatDDActionPerformed
        MenuChinh.getPnSlider().removeAll();
        MenuChinh.getPnSlider().repaint();
        MenuChinh.getPnSlider().revalidate();

        MenuChinh.getPnSlider().add(new pnManHinhChinh());
        MenuChinh.getPnSlider().repaint();
        MenuChinh.getPnSlider().revalidate();
    }//GEN-LAST:event_btnThoatDDActionPerformed

    private void btnCCSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCCSPActionPerformed
        tableSP.editCellAt(-1, -1);
        if (btnCCSP.getText().equalsIgnoreCase("Chấm công(Alt+N)")) {
            moKhoaCtrlSP(false);
            btnLuuSP.setEnabled(true);
            btnCCSP.setEnabled(true);
            btnCCSP.setText("Hủy(Alt+N)");
            ktraNgaySP();
            xoaDLTableSP();
            docCNVaoTableSP();
        } else {
            moKhoaCtrlSP(true);
            btnLuuSP.setEnabled(false);
            btnCCSP.setText("Chấm công(Alt+N)");
            xoaDLTableSP();
            docCCSPVaoTableSP();
        }
    }//GEN-LAST:event_btnCCSPActionPerformed

    private void btnSuaSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaSPActionPerformed
        tableSP.editCellAt(-1, -1);
        if (btnSuaSP.getText().equalsIgnoreCase("Sửa(Alt+U)")) {
            moKhoaCtrlSP(false);
            btnLuuSP.setEnabled(true);
            btnSuaSP.setEnabled(true);
            btnSuaSP.setText("Hủy(Alt+U)");
            tableSP.editCellAt(-1, -1);
            docSLvaoDsCD();
        } else {
            moKhoaCtrlSP(true);
            btnLuuSP.setEnabled(false);
            btnSuaSP.setText("Sửa(Alt+U)");
            xoaDLTableSP();
            docCCSPVaoTableSP();
        }
    }//GEN-LAST:event_btnSuaSPActionPerformed

    private void btnThoatSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThoatSPActionPerformed
        MenuChinh.getPnSlider().removeAll();
        MenuChinh.getPnSlider().repaint();
        MenuChinh.getPnSlider().revalidate();

        MenuChinh.getPnSlider().add(new pnManHinhChinh());
        MenuChinh.getPnSlider().repaint();
        MenuChinh.getPnSlider().revalidate();
    }//GEN-LAST:event_btnThoatSPActionPerformed

    private void dateNgayCCSPOnSelectionChange(datechooser.events.SelectionChangedEvent evt) {//GEN-FIRST:event_dateNgayCCSPOnSelectionChange
        txtTimMaCCSP.setText("");
        txtTimTenCCSP.setText("");
        if (btnCCSP.getText().equalsIgnoreCase("Hủy(Alt+N)")) {
            if (ktraNgaySP()) {
                xoaDLTableSP();
                docCNVaoTableSP();
            }
            return;
        }
        xoaDLTableSP();
        docCCSPVaoTableSP();
        tableSP.editCellAt(-1, -1);
        docSLvaoDsCD();
    }//GEN-LAST:event_dateNgayCCSPOnSelectionChange

    private void cboCaLamSPItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboCaLamSPItemStateChanged
        if (btnCCSP.getText().equalsIgnoreCase("Hủy(Alt+N)")) {
            if (ktraNgaySP()) {
                xoaDLTableSP();
                docCNVaoTableSP();
            }
            return;
        }
        xoaDLTableSP();
        docCCSPVaoTableSP();
        tableSP.editCellAt(-1, -1);
        docSLvaoDsCD();
    }//GEN-LAST:event_cboCaLamSPItemStateChanged

    private void cboSPItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboSPItemStateChanged
        int r = cboSP.getSelectedIndex();
        String maSP = "";
        if (r != 0) {
            maSP = dsSP.get(r - 1).getMaSP();
            txtMaSP.setText(maSP);
            dsCD = congDoan_DAO.getAllCongDoanTheoMaSP(maSP);
            if (btnCCSP.getText().equalsIgnoreCase("Hủy(Alt+N)")) {
                xoaDLTableSP();
//                sh_Mes("1"+dsCCSP.size()+","+dsHienThiCCSP.size(), txtMaCCDD);
                docCNVaoTableSP(maSP, "Tất cả");
                docCD();
                return;
            }
            xoaDLTableSP();
            docCCSPVaoTableSP(maSP, "Tất cả");
            tableSP.editCellAt(-1, -1);
            docSLvaoDsCD();
            docCD();
            return;
        }
        dsCD = congDoan_DAO.getAllCongDoanTheoMaSP(maSP);
        txtMaSP.setText(maSP);
        if (btnCCSP.getText().equalsIgnoreCase("Hủy(Alt+N)")) {
            xoaDLTableSP();
            docCNVaoTableSP("Tất cả", "Tất cả");
            docCD();
            return;
        }
        xoaDLTableSP();
        docCCSPVaoTableSP("Tất cả", "Tất cả");
        tableSP.editCellAt(-1, -1);
        docSLvaoDsCD();
        docCD();
    }//GEN-LAST:event_cboSPItemStateChanged

    private void cboCDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboCDItemStateChanged
        int r = cboCD.getSelectedIndex();
        int sp = cboSP.getSelectedIndex();
        String maSP = "";
        if (sp == 0) {
            maSP = "";
        } else {
            maSP = dsSP.get(sp - 1).getMaSP();
        }
        if (r != 0) {
            String maCD = dsCD.get(r - 1).getMaCD();
            if (btnCCSP.getText().equalsIgnoreCase("Hủy(Alt+N)")) {
                xoaDLTableSP();
                docCNVaoTableSP(maSP, maCD);
                return;
            }
            xoaDLTableSP();
            docCCSPVaoTableSP(maSP, maCD);
            tableSP.editCellAt(-1, -1);
            docSLvaoDsCD();
            return;
        }
        if (btnCCSP.getText().equalsIgnoreCase("Hủy(Alt+N)")) {
            xoaDLTableSP();
            docCNVaoTableSP(maSP, "Tất cả");
            return;
        }
        xoaDLTableSP();
        docCCSPVaoTableSP(maSP, "Tất cả");
        tableSP.editCellAt(-1, -1);
        docSLvaoDsCD();
    }//GEN-LAST:event_cboCDItemStateChanged

    private void tabPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabPaneMouseClicked
//       int n = tabPane.getSelectedIndex();
//        if (n != tabChon) {
//            tabChon = n;
//            if (n == 0) {
//                moKhoaCtrlDD(true);
//                btnLuuDD.setEnabled(false);
//                btnCCDD.setText("Chấm công(F4)");
//                btnSuaDD.setText("Sửa(F4)");
//
//                LocalDate ngayCC = convertToLocalDateViaInstant(dateNgayCCSP.getSelectedDate().getTime());
//                Calendar ngay = Calendar.getInstance();
//                ngay.setTime(convertToDateViaInstant(ngayCC));
//                dateDD.setSelectedDate(ngay);
//
//                xoaDLTableDD();
//                docDDVaoTableDD();
//
//                moKhoaCtrlSP(true);
//                btnLuuSP.setEnabled(false);
//                btnCCSP.setText("Chấm công(F4)");
//                btnSuaSP.setText("Sửa(F4)");
//                xoaDLTableSP();
//                return;
//            }
//            moKhoaCtrlSP(true);
//            btnLuuSP.setEnabled(false);
//            btnCCSP.setText("Chấm công(F4)");
//            btnSuaSP.setText("Sửa(F4)");
//
//            LocalDate ngayCC = convertToLocalDateViaInstant(dateDD.getSelectedDate().getTime());
//            Calendar ngay = Calendar.getInstance();
//            ngay.setTime(convertToDateViaInstant(ngayCC));
//            dateNgayCCSP.setSelectedDate(ngay);
//
//            xoaDLTableSP();
//            docCCSPVaoTableSP();
//
//            moKhoaCtrlDD(true);
//            btnLuuDD.setEnabled(false);
//            btnCCDD.setText("Chấm công(F4)");
//            btnSuaDD.setText("Sửa(F4)");
//            xoaDLTableDD();
//        }
    }//GEN-LAST:event_tabPaneMouseClicked

    private void tabPaneMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabPaneMousePressed
        int n = tabPane.getSelectedIndex();
        if (n != tabChon) {
            tabChon = n;
            if (n == 0) {
                moKhoaCtrlDD(true);
                btnLuuDD.setEnabled(false);
                btnCCDD.setText("Chấm công(Alt+N)");
                btnSuaDD.setText("Sửa(Alt+U)");

                LocalDate ngayCC = convertToLocalDateViaInstant(dateNgayCCSP.getSelectedDate().getTime());
                Calendar ngay = Calendar.getInstance();
                ngay.setTime(convertToDateViaInstant(ngayCC));
                dateDD.setSelectedDate(ngay);

                xoaDLTableDD();
                docDDVaoTableDD();

                moKhoaCtrlSP(true);
                btnLuuSP.setEnabled(false);
                btnCCSP.setText("Chấm công(Alt+N)");
                btnSuaSP.setText("Sửa(Alt+U)");
                xoaDLTableSP();
                return;
            }
            moKhoaCtrlSP(true);
            btnLuuSP.setEnabled(false);
            btnCCSP.setText("Chấm công(Alt+U)");
            btnSuaSP.setText("Sửa(Alt+U)");

            LocalDate ngayCC = convertToLocalDateViaInstant(dateDD.getSelectedDate().getTime());
            Calendar ngay = Calendar.getInstance();
            ngay.setTime(convertToDateViaInstant(ngayCC));
            dateNgayCCSP.setSelectedDate(ngay);

            xoaDLTableSP();
            docCCSPVaoTableSP();

            moKhoaCtrlDD(true);
            btnLuuDD.setEnabled(false);
            btnCCDD.setText("Chấm công(Alt+N)");
            btnSuaDD.setText("Sửa(Alt+U)");
            xoaDLTableDD();
        }
    }//GEN-LAST:event_tabPaneMousePressed

    private void chkNgayLeDDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkNgayLeDDItemStateChanged
        ktraLoaiNgay();
    }//GEN-LAST:event_chkNgayLeDDItemStateChanged

    private void txtTimMaCNDDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimMaCNDDKeyReleased
        timCongNhanDD();
    }//GEN-LAST:event_txtTimMaCNDDKeyReleased

    private void txtTimTenCNDDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimTenCNDDKeyReleased
        timCongNhanDD();
    }//GEN-LAST:event_txtTimTenCNDDKeyReleased

    private void txtTimMaCCSPKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimMaCCSPKeyReleased
        timCongNhanCCSP();
    }//GEN-LAST:event_txtTimMaCCSPKeyReleased

    private void txtTimTenCCSPKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimTenCCSPKeyReleased
        timCongNhanCCSP();
    }//GEN-LAST:event_txtTimTenCCSPKeyReleased

    private void chamCongDDCN() {
        int n = modelDD.getRowCount();
        if (n != 0) {
            if (!ktraDL_DD()) {
                return;
            }

//            ktraLoaiNgay();
            LocalDate ngayCC = convertToLocalDateViaInstant(dateDD.getSelectedDate().getTime());
            NgayLamViec ngayLV = ngayLamViec_DAO.timNgayLamViec(ngayCC);
            boolean flag = chkNgayLeDD.isSelected();
            if (ngayLV == null) {
                ngayLV = new NgayLamViec(ngayCC, flag);
                ngayLamViec_DAO.themNgayLamViec(ngayLV);
            }

            BangDiemDanhCN bangDD = null;
            String maDD;
            String maCN;
            int coMat;
//            int caLam;
            double phat;
            String ghiChu;
            for (int i = 0; i < n; i++) {
                maDD = modelDD.getValueAt(i, 0).toString();
                maCN = modelDD.getValueAt(i, 1).toString();
                coMat = (modelDD.getValueAt(i, 3).toString() == "Có mặt" ? 2 : (modelDD.getValueAt(i, 3).toString() == "Có phép" ? 1 : 0));
//                caLam = cboCaLamDD.getSelectedIndex() + 1;
                phat = Double.parseDouble("0" + modelDD.getValueAt(i, 4).toString());
                ghiChu = modelDD.getValueAt(i, 5).toString();
                bangDD = new BangDiemDanhCN(maDD, coMat, phat, ghiChu, new BangPhanCong(dsCN.get(i).getBangPhanCong().getMaPC()), new NgayLamViec(ngayCC));
                bangDiemDanhCN_DAO.chamCongDiemDanhCN(bangDD);

                //Cập nhật bảng lương CN
                BangLuongCN bangLCN = bangLuongCN_DAO.timBangLCN(String.format("LCN%04d%2d%04d", Integer.parseInt(maCN.substring(2)), ngayCC.getMonthValue(), ngayCC.getYear()));
                if (bangLCN == null) {
                    bangLCN = bangLuongCN_DAO.taoBangLuongCN(maCN, ngayCC.getMonthValue(), ngayCC.getYear());
                }
                bangLCN.setSoNgayLam(coMat, ngayLV);
                bangLCN.setThemPhat(phat);
                bangLuongCN_DAO.suaBLCN(bangLCN);
            }
            sh_Mes("Chấm công thành công", null);
            moKhoaCtrlDD(true);
            btnLuuDD.setEnabled(false);
            btnCCDD.setText("Chấm công(Alt+N)");
            xoaDLTableDD();
            docDDVaoTableDD();
        }
    }

    private void suaChamCongDDCN() {
        int n = modelDD.getRowCount();
        if (n != 0) {
            if (!ktraDL_DD()) {
                return;
            }
            BangDiemDanhCN bangDD = null;
            String ma;
            String maCN;
            int coMat;
            double phat;
            String ghiChu;
            LocalDate ngayCC = convertToLocalDateViaInstant(dateDD.getSelectedDate().getTime());
            NgayLamViec ngayLV = ngayLamViec_DAO.timNgayLamViec(ngayCC);
            for (int i = 0; i < n; i++) {
                ma = modelDD.getValueAt(i, 0).toString();
                maCN = modelDD.getValueAt(i, 1).toString();
                coMat = (modelDD.getValueAt(i, 3).toString() == "Có mặt" ? 2 : (modelDD.getValueAt(i, 3).toString() == "Có phép" ? 1 : 0));
                phat = Double.parseDouble("0" + modelDD.getValueAt(i, 4).toString());
                ghiChu = modelDD.getValueAt(i, 5).toString();
                bangDD = new BangDiemDanhCN(ma, coMat, phat, ghiChu, null, null);
                bangDiemDanhCN_DAO.suaCCDiemDanhCN(bangDD);

                //Cập nhật bảng lương
                BangLuongCN bangLCN = bangLuongCN_DAO.timBangLCN(String.format("LCN%04d%2d%04d", Integer.parseInt(maCN.substring(2)), ngayCC.getMonthValue(), ngayCC.getYear()));
                BangDiemDanhCN bangDDTam = dsCNHienThi.get(i);
//                sh_Mes(bangDDTam.getCoMAt() + " " + coMat, txtMaSP);
                if (bangDDTam.getCoMAt() != coMat) {
                    if (bangDDTam.getCoMAt() == 2) {
                        bangLCN.setSoNgayCong(bangLCN.getSoNgayCong() - 1);
                        if (ngayLV.isLoaiNgay()) {
                            bangLCN.setSoNgayCong(bangLCN.getSoNgayCong() - 2);
                        } else if (ktraNgayCN(ngayLV.getNgayLam())) {
                            bangLCN.setSoNgayCong(bangLCN.getSoNgayCong() - 1);
                        }
                        if (coMat == 0) {
                            bangLCN.setSoNgayNghiKoPhep(bangLCN.getSoNgayNghiKoPhep() + 1);
                        }
                        bangLCN.setPhat(bangLCN.getPhat() - bangChamCongSP_DAO.getPhatTHeoMaCCCN(bangDDTam.getMaCCCN()));
                        bangChamCongSP_DAO.xoaCCSPTheoMaCCCN(bangDDTam.getMaCCCN());
                    } else if (bangDDTam.getCoMAt() == 1) {
                        if (coMat == 0) {
                            bangLCN.setSoNgayNghiKoPhep(bangLCN.getSoNgayNghiKoPhep() + 1);
                        }
                        if (coMat == 2) {
                            bangLCN.setSoNgayCong(bangLCN.getSoNgayCong() + 1);
                            if (ngayLV.isLoaiNgay()) {
                                bangLCN.setSoNgayCong(bangLCN.getSoNgayCong() + 2);
                            } else if (ktraNgayCN(ngayLV.getNgayLam())) {
                                bangLCN.setSoNgayCong(bangLCN.getSoNgayCong() + 1);
                            }
                        }
                    } else {
                        bangLCN.setSoNgayNghiKoPhep(bangLCN.getSoNgayNghiKoPhep() - 1);
                        if (coMat == 2) {
                            bangLCN.setSoNgayCong(bangLCN.getSoNgayCong() + 1);
                            if (ngayLV.isLoaiNgay()) {
                                bangLCN.setSoNgayCong(bangLCN.getSoNgayCong() + 2);
                            } else if (ktraNgayCN(ngayLV.getNgayLam())) {
                                bangLCN.setSoNgayCong(bangLCN.getSoNgayCong() + 1);
                            }
                        }
                    }
                }
                if (bangDDTam.getPhat() != phat) {
                    bangLCN.setPhat(bangLCN.getPhat() + phat - bangDDTam.getPhat());
                }
                bangLuongCN_DAO.suaBLCN(bangLCN);
            }
            sh_Mes("Sửa thành công", null);
            moKhoaCtrlDD(true);
            btnLuuDD.setEnabled(false);
            btnSuaDD.setText("Sửa(Alt+U)");
            tableDD.clearSelection();
            xoaDLTableDD();
            docDDVaoTableDD();
        }
    }

    private void docDDVaoTableDD() {
        LocalDate ngayCC = convertToLocalDateViaInstant(dateDD.getSelectedDate().getTime());
//        int caLam = cboCaLamDD.getSelectedIndex() + 1;
        dsCN = bangDiemDanhCN_DAO.getAllDsDDCN(ngayCC);
        dsCNHienThi.clear();
        dsCNHienThi = dsCN;
        for (BangDiemDanhCN bangDDCN : dsCN) {
            String coMat = (bangDDCN.getCoMAt() == 2 ? "Có mặt" : (bangDDCN.getCoMAt() == 1 ? "Có phép" : "Không phép"));
            modelDD.addRow(new Object[]{bangDDCN.getMaCCCN(), bangDDCN.getBangPhanCong().getCongNhan().getMaCN(), bangDDCN.getBangPhanCong().getCongNhan().getTenCN(), coMat, bangDDCN.getPhat() == 0 ? "" : bangDDCN.getPhat(), bangDDCN.getGhiCHu()});
//            dsCNHienThi.add(bangDDCN);
        }
        NgayLamViec ngayLamViec = ngayLamViec_DAO.timNgayLamViec(ngayCC);
        chkNgayLeDD.setSelected(ngayLamViec == null ? false : ngayLamViec.isLoaiNgay());
    }

    private void docCNVaoTableDD() {
        LocalDate ngayCC = convertToLocalDateViaInstant(dateDD.getSelectedDate().getTime());
//        int caLam = cboCaLamDD.getSelectedIndex() + 1;
        dsCN = bangDiemDanhCN_DAO.getAllDsChuaDDCN(ngayCC);
        dsCNHienThi = dsCN;
        for (BangDiemDanhCN bangDDCN : dsCN) {
            modelDD.addRow(new Object[]{bangDDCN.getMaCCCN(), bangDDCN.getBangPhanCong().getCongNhan().getMaCN(), bangDDCN.getBangPhanCong().getCongNhan().getTenCN(), "Có mặt", "", ""});
//            dsCNHienThi.add(bangDDCN);
        }
        NgayLamViec ngayLamViec = ngayLamViec_DAO.timNgayLamViec(ngayCC);
        chkNgayLeDD.setSelected(ngayLamViec == null ? false : ngayLamViec.isLoaiNgay());
    }

    private void timCongNhanDD() {
        tableDD.editCellAt(-1, -1);
        xoaDLTableDD();
        String maCCDD = txtTimMaCNDD.getText().trim();
        String tenNV = txtTimTenCNDD.getText().trim();
        maCCDD = maCCDD.replace("*", ".+");
        maCCDD = maCCDD.replaceAll("\\s\\s+", " ");
        tenNV = tenNV.replace("*", ".+");
        tenNV = tenNV.replaceAll("\\s\\s+", " ");
        if (!maCCDD.matches(".*\\+.*")) {
            maCCDD = ".*" + maCCDD + ".*";
        }
        String regex_maCN = String.format("^%s$", maCCDD);
        String regex_tenCN = String.format("^.*%s.*$", tenNV);
        Pattern mypattern_Ma = Pattern.compile(regex_maCN, (Pattern.UNICODE_CASE | Pattern.CASE_INSENSITIVE));
        Matcher mymatcher_Ma;
        Pattern mypattern_Ten = Pattern.compile(regex_tenCN, (Pattern.UNICODE_CASE | Pattern.CASE_INSENSITIVE));
        Matcher mymatcher_Ten;

        for (BangDiemDanhCN bangDDCN : dsCNHienThi) {
            mymatcher_Ma = mypattern_Ma.matcher(bangDDCN.getBangPhanCong().getCongNhan().getMaCN());
            mymatcher_Ten = mypattern_Ten.matcher(bangDDCN.getBangPhanCong().getCongNhan().getTenCN());
            if ((maCCDD.equalsIgnoreCase("") || mymatcher_Ma.matches()) && (tenNV.equalsIgnoreCase("") || mymatcher_Ten.matches())) {
                String coMat = (bangDDCN.getCoMAt() == 2 ? "Có mặt" : (bangDDCN.getCoMAt() == 1 ? "Có phép" : "Không phép"));
                modelDD.addRow(new Object[]{bangDDCN.getMaCCCN(), bangDDCN.getBangPhanCong().getCongNhan().getMaCN(), bangDDCN.getBangPhanCong().getCongNhan().getTenCN(), coMat, bangDDCN.getPhat() == 0 ? "" : bangDDCN.getPhat(), bangDDCN.getGhiCHu()});
            }
        }
    }

    private void xoaDLTableDD() {
        DefaultTableModel model = (DefaultTableModel) tableDD.getModel();
        model.setRowCount(0);
    }

    private boolean ktraDL_DD() {
        int n = modelDD.getRowCount();
        if (n != 0) {
            for (int i = 0; i < n; i++) {
                if (modelDD.getValueAt(i, 4).toString().trim().equalsIgnoreCase("")) {
                    continue;
                }
                try {
                    if (Double.parseDouble(modelDD.getValueAt(i, 4).toString()) < 0) {
                        sh_Mes("Tiền phạt phải >=0", null);
                        tableDD.editCellAt(i, 4);
                        tableDD.setRowSelectionInterval(i, i);
                        return false;
                    }

                } catch (Exception e) {
                    sh_Mes("Tiền phạt phải nhập số", null);
                    tableDD.editCellAt(i, 4);
                    tableDD.setRowSelectionInterval(i, i);
                    return false;
                }
            }
        }
        return true;
    }

    private boolean ktraLoaiNgay() {
        LocalDate ngayCC = convertToLocalDateViaInstant(dateDD.getSelectedDate().getTime());
        NgayLamViec ngayLV = ngayLamViec_DAO.timNgayLamViec(ngayCC);
        boolean flag = chkNgayLeDD.isSelected();
        if (ngayLV == null) {
            return true;
        }
        if (ngayLV.isLoaiNgay() != flag) {
            String loai = flag ? "ngày thường" : "ngày lễ";
            String loaiMoi = flag ? "ngày lễ" : "ngày thường";
            int opt;
            if (ngayLV.isLoaiNgay()) {
                opt = JOptionPane.showConfirmDialog(null, "Ngày đang được chấm công đã được chấm là: " + loai
                        + "\nBạn muốn thay đổi ngày đang được chấm công thành: " + loaiMoi,
                        "Xác nhận", JOptionPane.YES_NO_OPTION);

            } else {
                opt = JOptionPane.showConfirmDialog(null, "Ngày đang được chấm công đã được chấm là: " + loai
                        + "\nBạn muốn thay đổi ngày đang được chấm công thành: " + loaiMoi
                        + "\nLưu ý: tất cả giờ tăng cả của nhân viên sẽ bị xóa",
                        "Xác nhận", JOptionPane.YES_NO_OPTION);
            }
            if (opt == JOptionPane.YES_OPTION) {
                capNhatBangChamCongNV(ngayLV);
                ngayLV = new NgayLamViec(ngayCC, flag);
                ngayLamViec_DAO.suaLoaiNgayLam(ngayLV);
                chkNgayLeDD.setSelected(flag);
                return false;
            }
            chkNgayLeDD.setSelected(!flag);
            return false;
        }
        return true;

    }

    private void capNhatBangChamCongNV(NgayLamViec ngayLV) {
        ArrayList<BangLuongNV> dsBangLNV = bangLuongNV_DAO.getAllDsBLNV(ngayLV.getNgayLam().getMonthValue(), ngayLV.getNgayLam().getYear());
        ArrayList<BangLuongCN> dsBangLCN = bangLuongCN_DAO.getAllDsBLCN(ngayLV.getNgayLam().getMonthValue(), ngayLV.getNgayLam().getYear());
        BangLuongNV bangLNV_TAm;
        BangLuongCN bangLCN_TAm;
        dsTangCaNV = bangChamCongTangCa_DAO.getAllDsDD_CCSP(ngayLV.getNgayLam());
        dsCN = bangDiemDanhCN_DAO.getAllDsDDCN(ngayLV.getNgayLam());
        if (ngayLV.isLoaiNgay()) {
            for (BangChamCongTangCa bangTC : dsTangCaNV) {
                if (bangTC.getBangDiemDanhNV().getCoMat() == 2) {
                    String maMoi = String.format("LNV%03d%02d%04d", Integer.parseInt(bangTC.getBangDiemDanhNV().getNhanVien().getMaNV().substring(2)), ngayLV.getNgayLam().getMonthValue(), ngayLV.getNgayLam().getYear());
                    int i = dsBangLNV.indexOf(new BangLuongNV(maMoi));
                    bangLNV_TAm = dsBangLNV.get(i);
                    if (ktraNgayCN(ngayLV.getNgayLam())) {
                        bangLNV_TAm.setSoNgayCong(bangLNV_TAm.getSoNgayCong() - 1);
                    } else {
                        bangLNV_TAm.setSoNgayCong(bangLNV_TAm.getSoNgayCong() - 2);
                    }
                    bangLuongNV_DAO.suaBLNV(bangLNV_TAm);
                    bangChamCongTangCa_DAO.xoaCCTangCaNV(bangTC.getBangDiemDanhNV().getMaCCNV());
                }
            }
            for (BangDiemDanhCN bangDD : dsCN) {
                if (bangDD.getCoMAt() == 2) {
                    String maMoi = String.format("LCN%04d%02d%04d", Integer.parseInt(bangDD.getBangPhanCong().getCongNhan().getMaCN().substring(2)), ngayLV.getNgayLam().getMonthValue(), ngayLV.getNgayLam().getYear());
                    int i = dsBangLCN.indexOf(new BangLuongCN(maMoi));
                    bangLCN_TAm = dsBangLCN.get(i);
                    if (ktraNgayCN(ngayLV.getNgayLam())) {
                        bangLCN_TAm.setSoNgayCong(bangLCN_TAm.getSoNgayCong() - 1);
                    } else {
                        bangLCN_TAm.setSoNgayCong(bangLCN_TAm.getSoNgayCong() - 2);
                    }
                    bangLuongCN_DAO.suaBLCN(bangLCN_TAm);
                }
            }
        } else {
            for (BangChamCongTangCa bangTC : dsTangCaNV) {
                if (bangTC.getBangDiemDanhNV().getCoMat() == 2) {
                    String maMoi = String.format("LNV%03d%2d%04d", Integer.parseInt(bangTC.getBangDiemDanhNV().getNhanVien().getMaNV().substring(2)), ngayLV.getNgayLam().getMonthValue(), ngayLV.getNgayLam().getYear());
                    int i = dsBangLNV.indexOf(new BangLuongNV(maMoi));
                    bangLNV_TAm = dsBangLNV.get(i);
                    if (ktraNgayCN(ngayLV.getNgayLam())) {
                        bangLNV_TAm.setSoNgayCong(bangLNV_TAm.getSoNgayCong() + 1);
                    } else {
                        bangLNV_TAm.setSoNgayCong(bangLNV_TAm.getSoNgayCong() + 2);
                    }
                    bangLNV_TAm.setSoGioTangCa(bangLNV_TAm.getSoGioTangCa() - bangTC.getSoGioTangCa());
                    bangLNV_TAm.setPhat(bangLNV_TAm.getPhat() - bangTC.getPhat());
                    bangLuongNV_DAO.suaBLNV(bangLNV_TAm);
                    bangChamCongTangCa_DAO.xoaCCTangCaNV(bangTC.getBangDiemDanhNV().getMaCCNV());
                }
            }
            for (BangDiemDanhCN bangDD : dsCN) {
                if (bangDD.getCoMAt() == 2) {
                    String maMoi = String.format("LCN%04d%2d%04d", Integer.parseInt(bangDD.getBangPhanCong().getCongNhan().getMaCN().substring(2)), ngayLV.getNgayLam().getMonthValue(), ngayLV.getNgayLam().getYear());
                    int i = dsBangLCN.indexOf(new BangLuongCN(maMoi));
                    bangLCN_TAm = dsBangLCN.get(i);
                    if (ktraNgayCN(ngayLV.getNgayLam())) {
                        bangLCN_TAm.setSoNgayCong(bangLCN_TAm.getSoNgayCong() + 1);
                    } else {
                        bangLCN_TAm.setSoNgayCong(bangLCN_TAm.getSoNgayCong() + 2);
                    }
                    bangLuongCN_DAO.suaBLCN(bangLCN_TAm);
                }
            }
        }
    }

    private boolean ktraNgayDD() {
        LocalDate ngayCC = convertToLocalDateViaInstant(dateDD.getSelectedDate().getTime());
        if (ngayCC.isAfter(LocalDate.now())) {
            sh_Mes("Ngày chấm công không được sau ngày hiện tại", null);
            Calendar ngay = Calendar.getInstance();
            ngay.setTime(convertToDateViaInstant(LocalDate.now()));
            dateDD.setSelectedDate(ngay);
            return false;
        }
        return true;
    }

    private void moKhoaCtrlDD(boolean b) {
        btnCCDD.setEnabled(b);
        btnLuuDD.setEnabled(b);
        btnSuaDD.setEnabled(b);
        btnThoatDD.setEnabled(b);
        chkNgayLeDD.setEnabled(!b);
        tableDD.setEnabled(!b);
    }

    //chấm công sản phẩm
    private void chamCongSP() {
        int n = modelSP.getRowCount();
        if (n != 0) {
            if (!ktraDL_SP()) {
                return;
            }
            String ma;
            int soLuong;
            double phat;
            String ghiChu;
            int caLam = cboCaLamSP.getSelectedIndex() + 1;
            String sl = "";
            for (int i = 0; i < n; i++) {
                ma = modelSP.getValueAt(i, 0).toString();
                sl = modelSP.getValueAt(i, 5).toString();
                if (sl.trim().equals("")) {
                    sl = "0";
                }
                soLuong = Integer.parseInt(sl);
                phat = Double.parseDouble("0" + modelSP.getValueAt(i, 6).toString());
                ghiChu = modelSP.getValueAt(i, 7).toString();
                bangChamCongSP_DAO.chamCongSanPham(new BangChamCongSP(ma, caLam, soLuong, phat, ghiChu, dsHienThiCCSP.get(i).getBangDiemDanhCN()));
            }
            sh_Mes("Chấm công thành công", null);
            moKhoaCtrlSP(true);
            btnLuuSP.setEnabled(false);
            btnCCSP.setText("Chấm công(Alt+N)");
            xoaDLTableSP();
            docCCSPVaoTableSP();
        }
    }

    private void suaChamCongSP() {
        int n = modelSP.getRowCount();
        if (n != 0) {
            if (!ktraDL_SP()) {
                return;
            }
            String ma;
            int soLuong;
            double phat;
            String ghiChu;
            int caLam = cboCaLamSP.getSelectedIndex() + 1;
            String sl = "";
            for (int i = 0; i < n; i++) {
                ma = modelSP.getValueAt(i, 0).toString();
                sl = modelSP.getValueAt(i, 5).toString();
                if (sl.trim().equals("")) {
                    sl = "0";
                }
                soLuong = Integer.parseInt(sl);
                phat = Double.parseDouble("0" + modelSP.getValueAt(i, 6).toString());
                ghiChu = modelSP.getValueAt(i, 7).toString();
                bangChamCongSP_DAO.suaChamCongSanPham(new BangChamCongSP(ma, caLam, soLuong, phat, ghiChu, dsHienThiCCSP.get(i).getBangDiemDanhCN()));
            }
            sh_Mes("Sửa thành công", null);
            moKhoaCtrlSP(true);
            btnLuuSP.setEnabled(false);
            btnSuaSP.setText("Sửa(Alt+U)");
            tableSP.clearSelection();
            xoaDLTableSP();
            docCCSPVaoTableSP();
        }
    }

    private void docCCSPVaoTableSP() {
        LocalDate ngayCC = convertToLocalDateViaInstant(dateNgayCCSP.getSelectedDate().getTime());
        int caLam = cboCaLamSP.getSelectedIndex() + 1;
        dsCCSP = bangChamCongSP_DAO.getAllDsCCSP(ngayCC, caLam);
        BangPhanCong bangPC;
        dsSP.clear();
        dsTamCD.clear();
        CongDoan cd;
        SanPham sp;
        dsHienThiCCSP = dsCCSP;
        for (BangChamCongSP cn : dsCCSP) {
            bangPC = cn.getBangDiemDanhCN().getBangPhanCong();
            modelSP.addRow(new Object[]{cn.getMaCCSP(), bangPC.getCongNhan().getMaCN(), bangPC.getCongNhan().getTenCN(),
                bangPC.getCongDoan().getSanPham().getTenSP(), bangPC.getCongDoan().getTenCD(), cn.getSoLuongSP() == 0 ? "0" : cn.getSoLuongSP(), cn.getPhat() == 0 ? "" : cn.getPhat(), cn.getGhiChu()});
            sp = new SanPham(bangPC.getCongDoan().getSanPham().getMaSP());
            sp.setTenSP(bangPC.getCongDoan().getSanPham().getTenSP());
            cd = new CongDoan(bangPC.getCongDoan().getMaCD());
            cd.setSoLuong(cn.getSoLuongSP());
            if (!dsTamCD.contains(cd)) {
                dsTamCD.add(cd);
//                sh_Mes("0 " + cd.getSoLuong(), txtMaCCDD);
            } else {
                int ind = dsTamCD.indexOf(cd);
                CongDoan moi = dsTamCD.get(ind);
                moi.setSoLuong(moi.getSoLuong() + cd.getSoLuong());
                dsTamCD.set(ind, moi);
//                sh_Mes("1 " + moi.getSoLuong(), txtMaCCDD);
            }

            if (!dsSP.contains(sp)) {
                dsSP.add(sp);
            }
        }
        docSP();
    }

    private void docCCSPVaoTableSP(String maSP, String maCD) {
        BangPhanCong bangPC;
//        dsTamCD.clear();
        dsHienThiCCSP = new ArrayList<BangChamCongSP>();
        String maCCSP = txtTimMaCCSP.getText().trim();
        String tenCN = txtTimTenCCSP.getText().trim();
        maCCSP = maCCSP.replace("*", ".+");
        maCCSP = maCCSP.replaceAll("\\s\\s+", " ");
        tenCN = tenCN.replace("*", ".+");
        tenCN = tenCN.replaceAll("\\s\\s+", " ");
        if (!maCCSP.matches(".*\\+.*")) {
            maCCSP = ".*" + maCCSP + ".*";
        }
        String regex_maCCDD = String.format("^%s$", maCCSP);
        String regex_tenNV = String.format("^.*%s.*$", tenCN);
        Pattern mypattern_Ma = Pattern.compile(regex_maCCDD, (Pattern.UNICODE_CASE | Pattern.CASE_INSENSITIVE));
        Matcher mymatcher_Ma;
        Pattern mypattern_Ten = Pattern.compile(regex_tenNV, (Pattern.UNICODE_CASE | Pattern.CASE_INSENSITIVE));
        Matcher mymatcher_Ten;
        for (BangChamCongSP cn : dsCCSP) {
            bangPC = cn.getBangDiemDanhCN().getBangPhanCong();
            String mas = bangPC.getCongDoan().getSanPham().getMaSP();
            String mac = bangPC.getCongDoan().getMaCD();
            mymatcher_Ma = mypattern_Ma.matcher(cn.getBangDiemDanhCN().getBangPhanCong().getCongNhan().getMaCN());
            mymatcher_Ten = mypattern_Ten.matcher(cn.getBangDiemDanhCN().getBangPhanCong().getCongNhan().getTenCN());
            if ((maSP.equalsIgnoreCase("Tất cả") || (mas.equalsIgnoreCase(maSP) && (maCD.equalsIgnoreCase("Tất cả") || mac.equalsIgnoreCase(maCD))))
                    && (maCCSP.equalsIgnoreCase("") || mymatcher_Ma.matches()) && (tenCN.equalsIgnoreCase("") || mymatcher_Ten.matches())) {
                modelSP.addRow(new Object[]{cn.getMaCCSP(), bangPC.getCongNhan().getMaCN(), bangPC.getCongNhan().getTenCN(),
                    bangPC.getCongDoan().getSanPham().getTenSP(), bangPC.getCongDoan().getTenCD(), cn.getSoLuongSP(), cn.getPhat() == 0 ? "" : cn.getPhat(), cn.getGhiChu()});
                dsHienThiCCSP.add(cn);
            }
        }

    }

    private void docCNVaoTableSP() {
        LocalDate ngayCC = convertToLocalDateViaInstant(dateNgayCCSP.getSelectedDate().getTime());
        int caLam = cboCaLamSP.getSelectedIndex() + 1;
        dsCCSP = bangChamCongSP_DAO.getAllDsChuaCCSP(ngayCC, caLam);
        if (dsCCSP == null) {
            return;
        }
//        Sắp xếp*******
        Collections.sort(dsCCSP, (o1, o2) -> o1.getBangDiemDanhCN().getBangPhanCong().getCongDoan().getThuTu() - o2.getBangDiemDanhCN().getBangPhanCong().getCongDoan().getThuTu());
        dsSP.clear();
//        dsTamCD.clear();
        dsHienThiCCSP.clear();
        dsHienThiCCSP = dsCCSP;
        SanPham sp;
        BangPhanCong bangPC;
        for (BangChamCongSP bangDDCN : dsCCSP) {
            bangPC = bangDDCN.getBangDiemDanhCN().getBangPhanCong();
            modelSP.addRow(new Object[]{bangDDCN.getMaCCSP(), bangPC.getCongNhan().getMaCN(), bangPC.getCongNhan().getTenCN(),
                bangPC.getCongDoan().getSanPham().getTenSP(), bangPC.getCongDoan().getTenCD(), "", "", ""});
            sp = new SanPham(bangPC.getCongDoan().getSanPham().getMaSP());
            sp.setTenSP(bangPC.getCongDoan().getSanPham().getTenSP());
            if (!dsSP.contains(sp)) {
                dsSP.add(sp);
            }
        }
        docSP();
    }

//    private void timCongNhanCCSP() {
//        tableSP.editCellAt(-1, -1);
//        xoaDLTableSP();
//        String maCCSP = txtTimMaCNDD.getText().trim();
//        String tenCN = txtTimTenCNDD.getText().trim();
//        String regex_maCN;
//        String regex_tenCN;
//        for (BangChamCongSP bangDDCN : dsHienThiCCSP) {
//            regex_maCN = String.format("^.*%s.*$", maCCSP);
//            regex_tenCN = String.format("^.*%s.*$", tenCN);
//            if ((maCCSP.equalsIgnoreCase("") || bangDDCN.getBangPhanCong().getCongNhan().getMaCN().matches(regex_maCN)) && (tenCN.equalsIgnoreCase("") || bangDDCN.getBangPhanCong().getCongNhan().getTenCN().matches(regex_tenCN))) {
//                String coMat = (bangDDCN.getCoMAt() == 2 ? "Có mặt" : (bangDDCN.getCoMAt() == 1 ? "Có phép" : "Không phép"));
//                modelDD.addRow(new Object[]{bangDDCN.getMaCCCN(), bangDDCN.getBangPhanCong().getCongNhan().getMaCN(), bangDDCN.getBangPhanCong().getCongNhan().getTenCN(), coMat, bangDDCN.getPhat() == 0 ? "" : bangDDCN.getPhat(), bangDDCN.getGhiCHu()});
//            }
//        }
//    }
    private void docCNVaoTableSP(String maSP, String maCD) {
        BangPhanCong bangPC;
//        dsTamCD.clear();
        dsHienThiCCSP = new ArrayList<BangChamCongSP>();
        String maCCSP = txtTimMaCCSP.getText().trim();
        String tenCN = txtTimTenCCSP.getText().trim();
        maCCSP = maCCSP.replace("*", ".+");
        maCCSP = maCCSP.replaceAll("\\s\\s+", " ");
        tenCN = tenCN.replace("*", ".+");
        tenCN = tenCN.replaceAll("\\s\\s+", " ");
        if (!maCCSP.matches(".*\\+.*")) {
            maCCSP = ".*" + maCCSP + ".*";
        }
        String regex_maCCDD = String.format("^%s$", maCCSP);
        String regex_tenNV = String.format("^.*%s.*$", tenCN);
        Pattern mypattern_Ma = Pattern.compile(regex_maCCDD, (Pattern.UNICODE_CASE | Pattern.CASE_INSENSITIVE));
        Matcher mymatcher_Ma;
        Pattern mypattern_Ten = Pattern.compile(regex_tenNV, (Pattern.UNICODE_CASE | Pattern.CASE_INSENSITIVE));
        Matcher mymatcher_Ten;
        for (BangChamCongSP bangDDCN : dsCCSP) {
            bangPC = bangDDCN.getBangDiemDanhCN().getBangPhanCong();
            String mas = bangPC.getCongDoan().getSanPham().getMaSP();
            String mac = bangPC.getCongDoan().getMaCD();
            mymatcher_Ma = mypattern_Ma.matcher(bangDDCN.getBangDiemDanhCN().getBangPhanCong().getCongNhan().getMaCN());
            mymatcher_Ten = mypattern_Ten.matcher(bangDDCN.getBangDiemDanhCN().getBangPhanCong().getCongNhan().getTenCN());
            if ((maSP.equalsIgnoreCase("Tất cả") || (mas.equalsIgnoreCase(maSP) && (maCD.equalsIgnoreCase("Tất cả") || mac.equalsIgnoreCase(maCD))))
                    && (maCCSP.equalsIgnoreCase("") || mymatcher_Ma.matches()) && (tenCN.equalsIgnoreCase("") || mymatcher_Ten.matches())) {
                modelSP.addRow(new Object[]{bangDDCN.getMaCCSP(), bangPC.getCongNhan().getMaCN(), bangPC.getCongNhan().getTenCN(),
                    bangPC.getCongDoan().getSanPham().getTenSP(), bangPC.getCongDoan().getTenCD(), "", "", ""});
                dsHienThiCCSP.add(bangDDCN);
            }
        }
    }

    private void docSP() {
        xoaCboSP();
//        xoaCboCD();
        for (int i = 0; i < dsSP.size(); i++) {
            cboSP.addItem(dsSP.get(i).getTenSP());
        }

    }

    private void xoaCboSP() {
        while (cboSP.getItemCount() > 1) {
            cboSP.removeItemAt(1);
        }
    }

    private void docCD() {
        xoaCboCD();
        for (int i = 0; i < dsCD.size(); i++) {
            cboCD.addItem(dsCD.get(i).getTenCD());
        }

    }

    private void xoaCboCD() {
        while (cboCD.getItemCount() > 1) {
            cboCD.removeItemAt(1);
        }
    }

    private void timCongNhanCCSP() {
        int rCD = cboCD.getSelectedIndex();
        int rSP = cboSP.getSelectedIndex();
        String maSP = "";
        if (rSP == 0) {
            maSP = "Tất cả";
        } else {
            maSP = dsSP.get(rSP - 1).getMaSP();
        }
        if (rCD != 0) {
            String maCD = dsCD.get(rCD - 1).getMaCD();
            if (btnCCSP.getText().equalsIgnoreCase("Hủy(Alt+N)")) {
                xoaDLTableSP();
                docCNVaoTableSP(maSP, maCD);
                return;
            }
            xoaDLTableSP();
            docCCSPVaoTableSP(maSP, maCD);
            tableSP.editCellAt(-1, -1);
            docSLvaoDsCD();
            return;
        }
        if (btnCCSP.getText().equalsIgnoreCase("Hủy(Alt+N)")) {
            xoaDLTableSP();
            docCNVaoTableSP(maSP, "Tất cả");
            return;
        }
        xoaDLTableSP();
        docCCSPVaoTableSP(maSP, "Tất cả");
        tableSP.editCellAt(-1, -1);
        docSLvaoDsCD();
    }

    private boolean ktraDL_SP() {//**********
        int n = modelSP.getRowCount();
        if (n != 0) {
            ArrayList<CongDoan> dsSL_CD = new ArrayList<CongDoan>();
            String slSP_S;
            int sl;
            CongDoan cd;
            SanPham sp;
            BangPhanCong bangPC;
            String phat_S;
            for (int i = 0; i < n; i++) {
                slSP_S = modelSP.getValueAt(i, 5).toString();
                if (slSP_S.trim().equalsIgnoreCase("")) {
                    slSP_S = "0";
                }

                try {
                    sl = Integer.parseInt(slSP_S);
                    if (sl < 0) {
                        sh_Mes("Số lượng sản phẩm phải >= 0", null);
                        tableSP.editCellAt(i, 5);
                        tableSP.setRowSelectionInterval(i, i);
                        return false;
                    }
                } catch (Exception e) {
                    sh_Mes("Số lượng sản phẩm phải nhập số nguyên", null);
                    tableSP.editCellAt(i, 5);
                    tableSP.setRowSelectionInterval(i, i);
                    return false;
                }
                bangPC = dsCCSP.get(i).getBangDiemDanhCN().getBangPhanCong();
                sp = new SanPham(bangPC.getCongDoan().getSanPham().getMaSP());
                sp.setTenSP(bangPC.getCongDoan().getSanPham().getTenSP());
                cd = new CongDoan(bangPC.getCongDoan().getMaCD());
                cd.setTenCD(bangPC.getCongDoan().getTenCD());
                cd.setSoLuong(sl);
                cd.setSanPham(sp);
                if (!dsSL_CD.contains(cd)) {
                    dsSL_CD.add(cd);
                } else {
                    int ind = dsSL_CD.indexOf(cd);
                    CongDoan moi = dsSL_CD.get(ind);
                    moi.setSoLuong(moi.getSoLuong() + cd.getSoLuong());
                    dsSL_CD.set(ind, moi);
                }

                phat_S = modelSP.getValueAt(i, 6).toString();
                if (phat_S.trim().equalsIgnoreCase("")) {
                    continue;
                }
                try {
                    if (Double.parseDouble(phat_S) < 0) {
                        sh_Mes("Tiền phạt phải >=0", null);
                        tableSP.editCellAt(i, 6);
                        tableSP.setRowSelectionInterval(i, i);
                        return false;
                    }

                } catch (Exception e) {
                    sh_Mes("Tiền phạt phải nhập số", null);
                    tableSP.editCellAt(i, 6);
                    tableSP.setRowSelectionInterval(i, i);
                    return false;
                }
            }
            for (CongDoan cdd : dsSL_CD) {
                int cm = dsTamCD.indexOf(cdd);
                int slcon = congDoan_DAO.getSLSPChuaHoanThanhTheoMaCD(cdd.getMaCD());
                if (cm != -1) {
                    slcon += dsTamCD.get(cm).getSoLuong();
                }

                if (slcon < cdd.getSoLuong()) {
                    sh_Mes(String.format("Số lượng chưa hoàn thành của sản phẩm %s,công đoạn %s chỉ còn: %d\nTổng số lượng bạn đang chấm công là: %d",
                            cdd.getSanPham().getTenSP(), cdd.getTenCD(), slcon, cdd.getSoLuong()), null);
                    tableSP.editCellAt(-1, -1);
                    tableSP.clearSelection();

                    return false;
                }
                if (slcon == cdd.getSoLuong()) {
                    congDoan_DAO.capNhatTrangThaiCD(cdd.getMaCD(), true);
                    sanPham_DAO.capNhatTrangThaiSP(cdd.getSanPham().getMaSP(), sanPham_DAO.ktraTrangThaiSP(cdd.getSanPham().getMaSP()));
                } else {
                    congDoan_DAO.capNhatTrangThaiCD(cdd.getMaCD(), false);
                    sanPham_DAO.capNhatTrangThaiSP(cdd.getSanPham().getMaSP(), false);
                }
            }
        }
        return true;
    }

    private void docSLvaoDsCD() {
        BangPhanCong bangPC;
        dsTamCD.clear();
        CongDoan cd;
        for (BangChamCongSP cn : dsHienThiCCSP) {
            bangPC = cn.getBangDiemDanhCN().getBangPhanCong();
            cd = new CongDoan(bangPC.getCongDoan().getMaCD());
            cd.setSoLuong(cn.getSoLuongSP());
            if (!dsTamCD.contains(cd)) {
                dsTamCD.add(cd);
            } else {
                int ind = dsTamCD.indexOf(cd);
                CongDoan moi = dsTamCD.get(ind);
                moi.setSoLuong(moi.getSoLuong() + cd.getSoLuong());
                dsTamCD.set(ind, moi);
            }
        }
    }

    private boolean ktraNgaySP() {
        LocalDate ngayCC = convertToLocalDateViaInstant(dateNgayCCSP.getSelectedDate().getTime());
        if (ngayCC.isAfter(LocalDate.now())) {
            sh_Mes("Ngày chấm công không được sau ngày hiện tại", null);
            Calendar ngay = Calendar.getInstance();
            ngay.setTime(convertToDateViaInstant(LocalDate.now()));
            dateNgayCCSP.setSelectedDate(ngay);
            return false;
        }
        return true;
    }

    private void xoaDLTableSP() {
        DefaultTableModel model = (DefaultTableModel) tableSP.getModel();
        model.setRowCount(0);
    }

    private void moKhoaCtrlSP(boolean b) {
        btnCCSP.setEnabled(b);
        btnLuuSP.setEnabled(b);
        btnSuaSP.setEnabled(b);
        btnThoatSP.setEnabled(b);
        tableSP.setEnabled(!b);
    }

    public boolean ktraNgayCN(LocalDate ngay) {
        if (ngay.getDayOfWeek().getValue() == DayOfWeek.SUNDAY.getValue()) {
            return true;
        }
        return false;
    }

    private void sh_Mes(String mes, JTextField txt) {
        JOptionPane.showMessageDialog(null, mes);
        if (txt == null) {
            return;
        }
        txt.requestFocus();
    }

    public LocalDate convertToLocalDateViaInstant(Date dateToConvert) {
        return dateToConvert.toInstant()
                .atZone(ZoneId.systemDefault())
                .toLocalDate();
    }

    public LocalDate convertToLocalDateViaInstant(java.util.Date dateToConvert) {
        return dateToConvert.toInstant()
                .atZone(ZoneId.systemDefault())
                .toLocalDate();
    }

    public java.util.Date convertToDateViaInstant(LocalDate date) {
        return Date.from(date.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant());
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCCDD;
    private javax.swing.JButton btnCCSP;
    private javax.swing.JButton btnLuuDD;
    private javax.swing.JButton btnLuuSP;
    private javax.swing.JButton btnSuaDD;
    private javax.swing.JButton btnSuaSP;
    private javax.swing.JButton btnThoatDD;
    private javax.swing.JButton btnThoatSP;
    private javax.swing.JComboBox<String> cboCD;
    private javax.swing.JComboBox<String> cboCaLamSP;
    private javax.swing.JComboBox<String> cboSP;
    private javax.swing.JCheckBox chkNgayLeDD;
    private datechooser.beans.DateChooserCombo dateDD;
    private datechooser.beans.DateChooserCombo dateNgayCCSP;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCaLamSP;
    private javax.swing.JLabel lblMaCCDD;
    private javax.swing.JLabel lblMaCCSP;
    private javax.swing.JLabel lblNgayChamCongDD;
    private javax.swing.JLabel lblNgayChamCongSP;
    private javax.swing.JLabel lblTimTenDD;
    private javax.swing.JLabel lblTimTenSP;
    private javax.swing.JPanel pnBot;
    private javax.swing.JPanel pnChamCongDiemDanh;
    private javax.swing.JPanel pnChamCongSanPham;
    private javax.swing.JPanel pnMid;
    private javax.swing.JPanel pnMidSP;
    private javax.swing.JPanel pnTop;
    private javax.swing.JPanel pnTopSP;
    private javax.swing.JPanel tabChamCongSP;
    private javax.swing.JPanel tabDiemDanhCN;
    private javax.swing.JTabbedPane tabPane;
    private javax.swing.JTable tableDD;
    private javax.swing.JTable tableSP;
    private javax.swing.JTextField txtMaSP;
    private javax.swing.JTextField txtTimMaCCSP;
    private javax.swing.JTextField txtTimMaCNDD;
    private javax.swing.JTextField txtTimTenCCSP;
    private javax.swing.JTextField txtTimTenCNDD;
    // End of variables declaration//GEN-END:variables
}
