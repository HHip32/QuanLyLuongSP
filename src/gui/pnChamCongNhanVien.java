/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gui;

import dao.BangChamCongTangCa_DAO;
import dao.BangDiemDanhCN_DAO;
import dao.BangDiemDanhNV_DAO;
import dao.BangLuongCN_DAO;
import dao.BangLuongNV_DAO;
import dao.NgayLamViec_DAO;
import entity.BangChamCongTangCa;
import entity.BangDiemDanhCN;
import entity.BangDiemDanhNV;
import entity.BangLuongCN;
import entity.BangLuongNV;
import entity.NgayLamViec;
import entity.NhanVien;
import java.sql.Date;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.DefaultCellEditor;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import java.awt.event.KeyEvent;

/**
 *
 * @author Admin
 */
public class pnChamCongNhanVien extends javax.swing.JPanel {

    /**
     * Creates new form pnChamCongNhanVien
     */
    private DefaultTableModel modelDD;
    private DefaultComboBoxModel modelCaDD;
    private DefaultTableModel modelTC;
    private DefaultComboBoxModel modelCaTC;
    private JComboBox<String> cboDD;
    private TableColumn colDD;

    private NgayLamViec_DAO ngayLamViec_DAO;
    private BangDiemDanhCN_DAO bangDiemDanhCN_DAO;
    private BangDiemDanhNV_DAO bangDiemDanhNV_DAO;
    private BangChamCongTangCa_DAO bangChamCongTangCa_DAO;
    private BangLuongNV_DAO bangLuongNV_DAO;
    private BangLuongCN_DAO bangLuongCN_DAO;

    private ArrayList<BangDiemDanhNV> dsNV;
    private ArrayList<BangDiemDanhCN> dsCN;
    private ArrayList<BangDiemDanhNV> dsNVHienThi;
    private ArrayList<BangChamCongTangCa> dsTangCaNV;
    private ArrayList<BangChamCongTangCa> dsTangCaNVHienThi;

    private int tabChon = 0;

    public pnChamCongNhanVien() {
        ngayLamViec_DAO = new NgayLamViec_DAO();
        bangDiemDanhCN_DAO = new BangDiemDanhCN_DAO();
        bangDiemDanhNV_DAO = new BangDiemDanhNV_DAO();
        bangLuongCN_DAO = new BangLuongCN_DAO();
        bangLuongNV_DAO = new BangLuongNV_DAO();
        bangChamCongTangCa_DAO = new BangChamCongTangCa_DAO();

        dsCN = new ArrayList<BangDiemDanhCN>();
        dsNV = new ArrayList<BangDiemDanhNV>();
        dsNVHienThi = new ArrayList<BangDiemDanhNV>();
        dsTangCaNV = new ArrayList<BangChamCongTangCa>();
        dsTangCaNVHienThi = new ArrayList<BangChamCongTangCa>();

        cboDD = new JComboBox<String>();
        cboDD.addItem("Có mặt");
        cboDD.addItem("Có phép");
        cboDD.addItem("Không phép");
        initComponents();
        chkNgayLeDD.setEnabled(false);
        btnLuuDD.setEnabled(false);
        btnLuuTC.setEnabled(false);
        tableDD.setEnabled(false);
        tableTC.setEnabled(false);

        btnCCDD.setMnemonic(KeyEvent.VK_N);
        btnCCTC.setMnemonic(KeyEvent.VK_N);
        btnLuuDD.setMnemonic(KeyEvent.VK_S);
        btnLuuTC.setMnemonic(KeyEvent.VK_S);
        btnSuaDD.setMnemonic(KeyEvent.VK_U);
        btnSuaTC.setMnemonic(KeyEvent.VK_U);
        btnThoatDD.setMnemonic(KeyEvent.VK_F4);
        btnThoatTC.setMnemonic(KeyEvent.VK_F4);
        xoaDLTableDD();
        docDDVaoTableDD();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabPane = new javax.swing.JTabbedPane();
        tabChamCongDiemDanh = new javax.swing.JPanel();
        pnTop = new javax.swing.JPanel();
        lbNgaylChamCongDD = new javax.swing.JLabel();
        dateDD = new datechooser.beans.DateChooserCombo();
        chkNgayLeDD = new javax.swing.JCheckBox();
        lblMaChamCongDD = new javax.swing.JLabel();
        txtTimMaCCDD = new javax.swing.JTextField();
        lblTimTenNVDD = new javax.swing.JLabel();
        txtTimTenDD = new javax.swing.JTextField();
        pnMid = new javax.swing.JPanel();
        scrChamCongDD = new javax.swing.JScrollPane();
        tableDD = new javax.swing.JTable();
        btnLuuDD = new javax.swing.JButton();
        btnCCDD = new javax.swing.JButton();
        btnSuaDD = new javax.swing.JButton();
        btnThoatDD = new javax.swing.JButton();
        tabChamCongTangCa = new javax.swing.JPanel();
        pnTopTC = new javax.swing.JPanel();
        lblNgayChamCongTC = new javax.swing.JLabel();
        dateTC = new datechooser.beans.DateChooserCombo();
        lblMaChamCongTC = new javax.swing.JLabel();
        txtTimMaCCTC = new javax.swing.JTextField();
        lblTimTenTC = new javax.swing.JLabel();
        txtTimTenTC = new javax.swing.JTextField();
        pnMidTC = new javax.swing.JPanel();
        scrChamCongTC = new javax.swing.JScrollPane();
        tableTC = new javax.swing.JTable();
        btnLuuTC = new javax.swing.JButton();
        btnCCTC = new javax.swing.JButton();
        btnSuaTC = new javax.swing.JButton();
        btnThoatTC = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(209, 209, 209));
        setMaximumSize(new java.awt.Dimension(1310, 757));
        setPreferredSize(new java.awt.Dimension(1310, 757));

        tabPane.setPreferredSize(new java.awt.Dimension(1310, 755));
        tabPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabPaneMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tabPaneMousePressed(evt);
            }
        });

        pnTop.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lbNgaylChamCongDD.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lbNgaylChamCongDD.setText("Ngày chấm công:");

        dateDD.setCalendarPreferredSize(new java.awt.Dimension(325, 200));
        dateDD.setLocale(new java.util.Locale("vi", "VN", ""));
        dateDD.addSelectionChangedListener(new datechooser.events.SelectionChangedListener() {
            public void onSelectionChange(datechooser.events.SelectionChangedEvent evt) {
                dateDDOnSelectionChange(evt);
            }
        });

        chkNgayLeDD.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        chkNgayLeDD.setText("Ngày lễ");
        chkNgayLeDD.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkNgayLeDDItemStateChanged(evt);
            }
        });

        lblMaChamCongDD.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblMaChamCongDD.setText("Mã chấm công nhân viên:");

        txtTimMaCCDD.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTimMaCCDDKeyReleased(evt);
            }
        });

        lblTimTenNVDD.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblTimTenNVDD.setText("Tìm tên nhân viên:");

        txtTimTenDD.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTimTenDDKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout pnTopLayout = new javax.swing.GroupLayout(pnTop);
        pnTop.setLayout(pnTopLayout);
        pnTopLayout.setHorizontalGroup(
            pnTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTopLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(pnTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMaChamCongDD)
                    .addComponent(lbNgaylChamCongDD))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtTimMaCCDD, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(dateDD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(47, 47, 47)
                .addGroup(pnTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTimTenNVDD, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkNgayLeDD))
                .addGap(18, 18, 18)
                .addComponent(txtTimTenDD, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(194, 194, 194))
        );
        pnTopLayout.setVerticalGroup(
            pnTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTopLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateDD, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkNgayLeDD)
                    .addComponent(lbNgaylChamCongDD, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMaChamCongDD, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTimMaCCDD, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTimTenNVDD)
                    .addComponent(txtTimTenDD, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnMid.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Bảng chấm công điểm danh nhân viên", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N

        modelDD = new DefaultTableModel(new String [] {
            "Mã chấm công","Mã nhân viên", "Họ tên","Điểm danh", "Phạt", "Ghi chú"
        }, 0){
            boolean[] canEdit = new boolean[]{
                false, false, false, true,true,true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };
        tableDD.setModel(modelDD);
        colDD = tableDD.getColumnModel().getColumn(3);
        colDD.setCellEditor(new DefaultCellEditor(cboDD));

        tableDD.setRowHeight(20);
        scrChamCongDD.setViewportView(tableDD);

        javax.swing.GroupLayout pnMidLayout = new javax.swing.GroupLayout(pnMid);
        pnMid.setLayout(pnMidLayout);
        pnMidLayout.setHorizontalGroup(
            pnMidLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnMidLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrChamCongDD, javax.swing.GroupLayout.PREFERRED_SIZE, 1230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnMidLayout.setVerticalGroup(
            pnMidLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrChamCongDD, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
        );

        btnLuuDD.setBackground(new java.awt.Color(255, 204, 204));
        btnLuuDD.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        btnLuuDD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/diskette.png"))); // NOI18N
        btnLuuDD.setText("Lưu(Alt+S)");
        btnLuuDD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLuuDDActionPerformed(evt);
            }
        });

        btnCCDD.setBackground(new java.awt.Color(255, 204, 204));
        btnCCDD.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        btnCCDD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/editing.png"))); // NOI18N
        btnCCDD.setText("Chấm công(Alt+N)");
        btnCCDD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCCDDActionPerformed(evt);
            }
        });

        btnSuaDD.setBackground(new java.awt.Color(255, 204, 204));
        btnSuaDD.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        btnSuaDD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/eraser.png"))); // NOI18N
        btnSuaDD.setText("Sửa(Alt+U)");
        btnSuaDD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaDDActionPerformed(evt);
            }
        });

        btnThoatDD.setBackground(new java.awt.Color(255, 204, 204));
        btnThoatDD.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        btnThoatDD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/logout.png"))); // NOI18N
        btnThoatDD.setText("Thoát(Alt+F4)");
        btnThoatDD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThoatDDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tabChamCongDiemDanhLayout = new javax.swing.GroupLayout(tabChamCongDiemDanh);
        tabChamCongDiemDanh.setLayout(tabChamCongDiemDanhLayout);
        tabChamCongDiemDanhLayout.setHorizontalGroup(
            tabChamCongDiemDanhLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabChamCongDiemDanhLayout.createSequentialGroup()
                .addGroup(tabChamCongDiemDanhLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabChamCongDiemDanhLayout.createSequentialGroup()
                        .addGap(244, 244, 244)
                        .addComponent(pnTop, javax.swing.GroupLayout.PREFERRED_SIZE, 888, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tabChamCongDiemDanhLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pnMid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabChamCongDiemDanhLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCCDD, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnLuuDD, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSuaDD, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnThoatDD, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
        );
        tabChamCongDiemDanhLayout.setVerticalGroup(
            tabChamCongDiemDanhLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabChamCongDiemDanhLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(pnTop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnMid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(tabChamCongDiemDanhLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLuuDD, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCCDD, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSuaDD, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnThoatDD, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );

        tabPane.addTab("Chấm công điểm danh nhân viên", tabChamCongDiemDanh);

        tabChamCongTangCa.setPreferredSize(new java.awt.Dimension(1286, 757));

        pnTopTC.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lblNgayChamCongTC.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblNgayChamCongTC.setText("Ngày chấm công:");

        dateTC.setCalendarPreferredSize(new java.awt.Dimension(325, 220));
        dateTC.setLocale(new java.util.Locale("vi", "VN", ""));
        dateTC.addSelectionChangedListener(new datechooser.events.SelectionChangedListener() {
            public void onSelectionChange(datechooser.events.SelectionChangedEvent evt) {
                dateTCOnSelectionChange(evt);
            }
        });

        lblMaChamCongTC.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblMaChamCongTC.setText("Mã chấm công nhân viên:");

        txtTimMaCCTC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTimMaCCTCKeyReleased(evt);
            }
        });

        lblTimTenTC.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblTimTenTC.setText("Tìm tên nhân viên:");

        txtTimTenTC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTimTenTCKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout pnTopTCLayout = new javax.swing.GroupLayout(pnTopTC);
        pnTopTC.setLayout(pnTopTCLayout);
        pnTopTCLayout.setHorizontalGroup(
            pnTopTCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTopTCLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnTopTCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMaChamCongTC)
                    .addComponent(lblNgayChamCongTC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnTopTCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtTimMaCCTC, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(dateTC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(lblTimTenTC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTimTenTC, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(154, Short.MAX_VALUE))
        );
        pnTopTCLayout.setVerticalGroup(
            pnTopTCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTopTCLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnTopTCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateTC, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNgayChamCongTC, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnTopTCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnTopTCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtTimMaCCTC, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblTimTenTC)
                        .addComponent(txtTimTenTC, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblMaChamCongTC, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnMidTC.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Bảng chấm công số giờ tăng ca của nhân viên", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        pnMidTC.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        modelTC=new DefaultTableModel( new String [] {
            "Mã chấm công","Mã nhân viên", "Họ tên", "Số giờ tăng ca", "Phạt", "Ghi chú"
        }, 0){

            boolean[] canEdit = new boolean[]{
                false, false, false, true,true,true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };
        tableTC.setModel(modelTC);
        tableTC.setRowHeight(20);
        scrChamCongTC.setViewportView(tableTC);

        javax.swing.GroupLayout pnMidTCLayout = new javax.swing.GroupLayout(pnMidTC);
        pnMidTC.setLayout(pnMidTCLayout);
        pnMidTCLayout.setHorizontalGroup(
            pnMidTCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnMidTCLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrChamCongTC, javax.swing.GroupLayout.PREFERRED_SIZE, 1230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnMidTCLayout.setVerticalGroup(
            pnMidTCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnMidTCLayout.createSequentialGroup()
                .addComponent(scrChamCongTC, javax.swing.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnLuuTC.setBackground(new java.awt.Color(255, 204, 204));
        btnLuuTC.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        btnLuuTC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/diskette.png"))); // NOI18N
        btnLuuTC.setText("Lưu(Alt+S)");
        btnLuuTC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLuuTCActionPerformed(evt);
            }
        });

        btnCCTC.setBackground(new java.awt.Color(255, 204, 204));
        btnCCTC.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        btnCCTC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/editing.png"))); // NOI18N
        btnCCTC.setText("Chấm công(Alt+N)");
        btnCCTC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCCTCActionPerformed(evt);
            }
        });

        btnSuaTC.setBackground(new java.awt.Color(255, 204, 204));
        btnSuaTC.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        btnSuaTC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/eraser.png"))); // NOI18N
        btnSuaTC.setText("Sửa(Alt+U)");
        btnSuaTC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaTCActionPerformed(evt);
            }
        });

        btnThoatTC.setBackground(new java.awt.Color(255, 204, 204));
        btnThoatTC.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        btnThoatTC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/logout.png"))); // NOI18N
        btnThoatTC.setText("Thoát(Alt+F4)");
        btnThoatTC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThoatTCActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tabChamCongTangCaLayout = new javax.swing.GroupLayout(tabChamCongTangCa);
        tabChamCongTangCa.setLayout(tabChamCongTangCaLayout);
        tabChamCongTangCaLayout.setHorizontalGroup(
            tabChamCongTangCaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabChamCongTangCaLayout.createSequentialGroup()
                .addGroup(tabChamCongTangCaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabChamCongTangCaLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pnMidTC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tabChamCongTangCaLayout.createSequentialGroup()
                        .addGap(238, 238, 238)
                        .addComponent(pnTopTC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabChamCongTangCaLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnCCTC, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(btnLuuTC, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSuaTC, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnThoatTC, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54))
        );
        tabChamCongTangCaLayout.setVerticalGroup(
            tabChamCongTangCaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabChamCongTangCaLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(pnTopTC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnMidTC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(tabChamCongTangCaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLuuTC, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCCTC, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnThoatTC, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSuaTC, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8))
        );

        tabPane.addTab("Chấm công số giờ tăng ca", tabChamCongTangCa);

        jPanel1.setBackground(new java.awt.Color(255, 204, 204));
        jPanel1.setPreferredSize(new java.awt.Dimension(1303, 40));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Chấm công nhân viên");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(556, 556, 556)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addComponent(jLabel1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tabPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1277, Short.MAX_VALUE)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1289, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(tabPane, javax.swing.GroupLayout.PREFERRED_SIZE, 710, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tabPaneMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabPaneMousePressed
        int n = tabPane.getSelectedIndex();
        if (n != tabChon) {
            tabChon = n;
            if (n == 0) {
                moKhoaCtrlDD(true);
                btnLuuDD.setEnabled(false);
                btnCCDD.setText("Chấm công(Alt+N)");
                btnSuaDD.setText("Sửa(Alt+N)");

                if (dateTC.getSelectedDate() != null) {
                    LocalDate ngayCC = convertToLocalDateViaInstant(dateTC.getSelectedDate().getTime());
                    Calendar ngay = Calendar.getInstance();
                    ngay.setTime(convertToDateViaInstant(ngayCC));
                    dateDD.setSelectedDate(ngay);
                }

                xoaDLTableDD();
                docDDVaoTableDD();

                moKhoaCtrlTC(true);
                btnLuuTC.setEnabled(false);
                btnCCTC.setText("Chấm công(Alt+N)");
                btnSuaTC.setText("Sửa(Alt+U)");
                xoaDLTableTC();
                return;
            }
            moKhoaCtrlTC(true);
            btnLuuTC.setEnabled(false);
            btnCCTC.setText("Chấm công(Alt+N)");
            btnSuaTC.setText("Sửa(Alt+U)");

            if (dateDD.getSelectedDate() != null) {
                LocalDate ngayCC = convertToLocalDateViaInstant(dateDD.getSelectedDate().getTime());
                Calendar ngay = Calendar.getInstance();
                ngay.setTime(convertToDateViaInstant(ngayCC));
                dateTC.setSelectedDate(ngay);
            }

            xoaDLTableTC();
            docCCTCVaoTableTC();

            moKhoaCtrlDD(true);
            btnLuuDD.setEnabled(false);
            btnCCDD.setText("Chấm công(Alt+N)");
            btnSuaDD.setText("Sửa(Alt+U)");
            xoaDLTableDD();
        }
    }//GEN-LAST:event_tabPaneMousePressed

    private void tabPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabPaneMouseClicked
        int n = tabPane.getSelectedIndex();
        if (n != tabChon) {
            tabChon = n;
            if (n == 0) {
                moKhoaCtrlDD(true);
                btnLuuDD.setEnabled(false);
                btnCCDD.setText("Chấm công(Alt+N)");
                btnSuaDD.setText("Sửa(Alt+U)");

                if (dateTC.getSelectedDate() != null) {
                    LocalDate ngayCC = convertToLocalDateViaInstant(dateTC.getSelectedDate().getTime());
                    Calendar ngay = Calendar.getInstance();
                    ngay.setTime(convertToDateViaInstant(ngayCC));
                    dateDD.setSelectedDate(ngay);
                }

                xoaDLTableDD();
                docDDVaoTableDD();

                moKhoaCtrlTC(true);
                btnLuuTC.setEnabled(false);
                btnCCTC.setText("Chấm công(Alt+N)");
                btnSuaTC.setText("Sửa(Alt+U)");
                xoaDLTableTC();
                return;
            }
            moKhoaCtrlTC(true);
            btnLuuTC.setEnabled(false);
            btnCCTC.setText("Chấm công(Alt+N)");
            btnSuaTC.setText("Sửa(Alt+U)");

            if (dateDD.getSelectedDate() != null) {
                LocalDate ngayCC = convertToLocalDateViaInstant(dateDD.getSelectedDate().getTime());
                Calendar ngay = Calendar.getInstance();
                ngay.setTime(convertToDateViaInstant(ngayCC));
                dateTC.setSelectedDate(ngay);
            }

            xoaDLTableTC();
            docCCTCVaoTableTC();

            moKhoaCtrlDD(true);
            btnLuuDD.setEnabled(false);
            btnCCDD.setText("Chấm công(Alt+N)");
            btnSuaDD.setText("Sửa(Alt+U)");
            xoaDLTableDD();
        }
    }//GEN-LAST:event_tabPaneMouseClicked

    private void btnThoatTCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThoatTCActionPerformed
        MenuChinh.getPnSlider().removeAll();
        MenuChinh.getPnSlider().repaint();
        MenuChinh.getPnSlider().revalidate();

        MenuChinh.getPnSlider().add(new pnManHinhChinh());
        MenuChinh.getPnSlider().repaint();
        MenuChinh.getPnSlider().revalidate();
    }//GEN-LAST:event_btnThoatTCActionPerformed

    private void btnSuaTCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaTCActionPerformed
        tableTC.editCellAt(-1, -1);
        if (btnSuaTC.getText().equalsIgnoreCase("Sửa(Alt+U)")) {
            moKhoaCtrlTC(false);
            btnLuuTC.setEnabled(true);
            btnSuaTC.setEnabled(true);
            btnSuaTC.setText("Hủy(Alt+U)");
            tableTC.editCellAt(-1, -1);
        } else {
            moKhoaCtrlTC(true);
            btnLuuTC.setEnabled(false);
            btnSuaTC.setText("Sửa(Alt+U)");
            xoaDLTableTC();
            docCCTCVaoTableTC();
        }
    }//GEN-LAST:event_btnSuaTCActionPerformed

    private void btnCCTCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCCTCActionPerformed
        tableTC.editCellAt(-1, -1);
        if (btnCCTC.getText().equalsIgnoreCase("Chấm công(Alt+N)")) {
            moKhoaCtrlTC(false);
            btnLuuTC.setEnabled(true);
            btnCCTC.setEnabled(true);
            btnCCTC.setText("Hủy(Alt+N)");
            ktraNgayTC();
            xoaDLTableTC();
            docNVVaoTableTC();
        } else {
            moKhoaCtrlTC(true);
            btnLuuTC.setEnabled(false);
            btnCCTC.setText("Chấm công(Alt+N)");
            xoaDLTableTC();
            docCCTCVaoTableTC();
        }
    }//GEN-LAST:event_btnCCTCActionPerformed

    private void btnLuuTCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLuuTCActionPerformed
        tableTC.editCellAt(-1, -1);
        if (modelTC.getRowCount() == 0) {
            sh_Mes("Không có dữ liệu", null);
            return;
        }
        int opt;
        if (btnCCTC.getText().equalsIgnoreCase("Hủy(Alt+N)")) {
            opt = JOptionPane.showConfirmDialog(null, "Bạn muốn lưu chấm công", "Xác nhận", JOptionPane.YES_NO_OPTION);
            if (opt == JOptionPane.YES_OPTION) {
                chamCongTC();
            }
        } else {
            opt = JOptionPane.showConfirmDialog(null, "Bạn muốn lưu chấm công đã sửa", "Xác nhận", JOptionPane.YES_NO_OPTION);
            if (opt == JOptionPane.YES_OPTION) {
                suaChamCongTC();
            }
        }
        txtTimMaCCTC.setText("");
        txtTimTenTC.setText("");
    }//GEN-LAST:event_btnLuuTCActionPerformed

    private void txtTimTenTCKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimTenTCKeyReleased
        timNhanVienTC();
    }//GEN-LAST:event_txtTimTenTCKeyReleased

    private void txtTimMaCCTCKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimMaCCTCKeyReleased
        timNhanVienTC();
    }//GEN-LAST:event_txtTimMaCCTCKeyReleased

    private void dateTCOnSelectionChange(datechooser.events.SelectionChangedEvent evt) {//GEN-FIRST:event_dateTCOnSelectionChange
        txtTimMaCCTC.setText("");
        txtTimTenTC.setText("");
        if (btnCCTC.getText().equalsIgnoreCase("Hủy(Alt+N)")) {
            if (ktraNgayTC()) {
                xoaDLTableTC();
                docNVVaoTableTC();
            }
            return;
        }
        xoaDLTableTC();
        docCCTCVaoTableTC();
        tableTC.editCellAt(-1, -1);
    }//GEN-LAST:event_dateTCOnSelectionChange

    private void btnThoatDDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThoatDDActionPerformed
        MenuChinh.getPnSlider().removeAll();
        MenuChinh.getPnSlider().repaint();
        MenuChinh.getPnSlider().revalidate();

        MenuChinh.getPnSlider().add(new pnManHinhChinh());
        MenuChinh.getPnSlider().repaint();
        MenuChinh.getPnSlider().revalidate();
    }//GEN-LAST:event_btnThoatDDActionPerformed

    private void btnSuaDDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaDDActionPerformed
        tableDD.editCellAt(-1, -1);
        if (btnSuaDD.getText().equalsIgnoreCase("Sửa(Alt+U)")) {
            moKhoaCtrlDD(false);
            btnLuuDD.setEnabled(true);
            btnSuaDD.setEnabled(true);
            btnSuaDD.setText("Hủy(Alt+U)");
        } else {
            moKhoaCtrlDD(true);
            btnLuuDD.setEnabled(false);
            btnSuaDD.setText("Sửa(Alt+U)");
            xoaDLTableDD();
            docDDVaoTableDD();
        }
    }//GEN-LAST:event_btnSuaDDActionPerformed

    private void btnCCDDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCCDDActionPerformed
        tableDD.editCellAt(-1, -1);
        if (btnCCDD.getText().equalsIgnoreCase("Chấm công(Alt+N)")) {
            moKhoaCtrlDD(false);
            btnLuuDD.setEnabled(true);
            btnCCDD.setEnabled(true);
            btnCCDD.setText("Hủy(Alt+N)");
            ktraNgayDD();
            xoaDLTableDD();
            docCNVaoTableDD();
        } else {
            moKhoaCtrlDD(true);
            btnLuuDD.setEnabled(false);
            btnCCDD.setText("Chấm công(Alt+N)");
            xoaDLTableDD();
            docDDVaoTableDD();
        }
    }//GEN-LAST:event_btnCCDDActionPerformed

    private void btnLuuDDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLuuDDActionPerformed
        tableDD.editCellAt(-1, -1);
        if (modelDD.getRowCount() == 0) {
            sh_Mes("Không có dữ liệu", null);
            return;
        }
        int opt;
        if (btnCCDD.getText().equalsIgnoreCase("Hủy(Alt+N)")) {
            opt = JOptionPane.showConfirmDialog(null, "Bạn muốn lưu chấm công", "Xác nhận", JOptionPane.YES_NO_OPTION);
            if (opt == JOptionPane.YES_OPTION) {
                chamCongDDNV();
            }
        } else {
            opt = JOptionPane.showConfirmDialog(null, "Bạn muốn lưu chấm công đã sửa", "Xác nhận", JOptionPane.YES_NO_OPTION);
            if (opt == JOptionPane.YES_OPTION) {
                suaChamCongDDNV();
            }
        }
        txtTimMaCCDD.setText("");
        txtTimTenDD.setText("");
    }//GEN-LAST:event_btnLuuDDActionPerformed

    private void txtTimTenDDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimTenDDKeyReleased
        timNhanVienDD();
    }//GEN-LAST:event_txtTimTenDDKeyReleased

    private void txtTimMaCCDDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimMaCCDDKeyReleased
        timNhanVienDD();
    }//GEN-LAST:event_txtTimMaCCDDKeyReleased

    private void chkNgayLeDDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkNgayLeDDItemStateChanged
        ktraLoaiNgay();
    }//GEN-LAST:event_chkNgayLeDDItemStateChanged

    private void dateDDOnSelectionChange(datechooser.events.SelectionChangedEvent evt) {//GEN-FIRST:event_dateDDOnSelectionChange
        txtTimMaCCDD.setText("");
        txtTimTenDD.setText("");
        if (btnCCDD.getText().equalsIgnoreCase("Hủy(Alt+N)")) {
            if (ktraNgayDD()) {
                xoaDLTableDD();
                docCNVaoTableDD();
            }
            return;
        }
        xoaDLTableDD();
        docDDVaoTableDD();
    }//GEN-LAST:event_dateDDOnSelectionChange

    private void chamCongDDNV() {
        int n = modelDD.getRowCount();
        if (n != 0) {
            if (!ktraDL_DD()) {
                return;
            }

//            ktraLoaiNgay();
            LocalDate ngayCC = convertToLocalDateViaInstant(dateDD.getSelectedDate().getTime());
            NgayLamViec ngayLV = ngayLamViec_DAO.timNgayLamViec(ngayCC);
            boolean flag = chkNgayLeDD.isSelected();
            if (ngayLV == null) {
                ngayLV = new NgayLamViec(ngayCC, flag);
                ngayLamViec_DAO.themNgayLamViec(ngayLV);
            }
            BangDiemDanhNV bangDD = null;
            String ma;
            String maNV;
            int coMat;
            double phat;
            String ghiChu;
            for (int i = 0; i < n; i++) {
                ma = modelDD.getValueAt(i, 0).toString();
                maNV = modelDD.getValueAt(i, 1).toString();
                coMat = (modelDD.getValueAt(i, 3).toString() == "Có mặt" ? 2 : (modelDD.getValueAt(i, 3).toString() == "Có phép" ? 1 : 0));
                phat = Double.parseDouble("0" + modelDD.getValueAt(i, 4).toString());
                ghiChu = modelDD.getValueAt(i, 5).toString();
                bangDD = new BangDiemDanhNV(ma, coMat, phat, ghiChu, new NhanVien(maNV), ngayLV);
                bangDiemDanhNV_DAO.chamCongDiemDanhNV(bangDD);

                //Cập nhật bảng lương NV
                BangLuongNV bangLNV = bangLuongNV_DAO.timBangLNV(String.format("LNV%03d%02d%04d", Integer.parseInt(maNV.substring(2)), ngayCC.getMonthValue(), ngayCC.getYear()));
                if (bangLNV == null) {
                    bangLNV = bangLuongNV_DAO.taoBangLuongNV(maNV, ngayCC.getMonthValue(), ngayCC.getYear());
                    bangLNV.setPhat(phat);
                    if (coMat == 2) {
                        bangLNV.setSoNgayCong(bangLNV.getSoNgayCong() + 1);
                    }
                    if (coMat == 0) {
                        bangLNV.setSoNgayNghiKoPhep(bangLNV.getSoNgayNghiKoPhep() + 1);
                    }
                    if (ngayLV.isLoaiNgay()) {
                        bangLNV.setSoNgayCong(bangLNV.getSoNgayCong() + 2);
                    } else if (ktraNgayCN(ngayCC)) {
                        bangLNV.setSoNgayCong(bangLNV.getSoNgayCong() + 1);
                    }
                    bangLuongNV_DAO.themBLNV(bangLNV);
                } else {
                    bangLNV.setPhat(bangLNV.getPhat() + phat);
                    if (coMat == 2) {
                        bangLNV.setSoNgayCong(bangLNV.getSoNgayCong() + 1);
                    }
                    if (coMat == 0) {
                        bangLNV.setSoNgayNghiKoPhep(bangLNV.getSoNgayNghiKoPhep() + 1);
                    }
                    if (ngayLV.isLoaiNgay()) {
                        bangLNV.setSoNgayCong(bangLNV.getSoNgayCong() + 2);
                    } else if (ktraNgayCN(ngayCC)) {
                        bangLNV.setSoNgayCong(bangLNV.getSoNgayCong() + 1);
                    }
                    bangLuongNV_DAO.suaBLNV(bangLNV);
                }

            }
            sh_Mes("Chấm công thành công", null);
            moKhoaCtrlDD(true);
            btnLuuDD.setEnabled(false);
            btnCCDD.setText("Chấm công(Alt+N)");
            xoaDLTableDD();
            docDDVaoTableDD();
        }
    }

    private void suaChamCongDDNV() {
        int n = modelDD.getRowCount();
        if (n != 0) {
            if (!ktraDL_DD()) {
                return;
            }
//            ktraLoaiNgay();
            BangDiemDanhNV bangDD = null;
            String ma;
            int coMat;
            String maNV;
            double phat;
            String ghiChu;
            BangChamCongTangCa bangCCTC;
            LocalDate ngayCC = convertToLocalDateViaInstant(dateDD.getSelectedDate().getTime());
            NgayLamViec ngayLV = ngayLamViec_DAO.timNgayLamViec(ngayCC);
            dsTangCaNV = bangChamCongTangCa_DAO.getAllDsCCSP(ngayCC);
            for (int i = 0; i < n; i++) {
                ma = modelDD.getValueAt(i, 0).toString();
                maNV = modelDD.getValueAt(i, 1).toString();
                coMat = (modelDD.getValueAt(i, 3).toString() == "Có mặt" ? 2 : (modelDD.getValueAt(i, 3).toString() == "Có phép" ? 1 : 0));
                phat = Double.parseDouble("0" + modelDD.getValueAt(i, 4).toString());
                ghiChu = modelDD.getValueAt(i, 5).toString();
                bangDD = new BangDiemDanhNV(ma, coMat, phat, ghiChu, null, null);
                bangDiemDanhNV_DAO.suaCCDiemDanhNV(bangDD);

                //Cập nhật bảng lương NV
                BangLuongNV bangLNV = bangLuongNV_DAO.timBangLNV(String.format("LNV%03d%02d%04d", Integer.parseInt(maNV.substring(2)), ngayCC.getMonthValue(), ngayCC.getYear()));
//                sh_Mes(String.format("LNV%03d%02d%04d", Integer.parseInt(maNV.substring(2)), ngayCC.getMonthValue(), ngayCC.getYear())+" "+bangDDTam.getCoMat()+ " "+coMat, txtTimTenDD);
                BangDiemDanhNV bangDDTam = dsNVHienThi.get(i);
                int j = dsTangCaNV.indexOf(new BangChamCongTangCa(bangDDTam));
//                sh_Mes(j+" "+bangDDTam.getMaCCNV() + " "+dsTangCaNV.size(), txtTimTenDD);
                if (bangDDTam.getCoMat() != coMat) {
                    if (bangDDTam.getCoMat() == 2) {
                        bangLNV.setSoNgayCong(bangLNV.getSoNgayCong() - 1);
                        if (ngayLV.isLoaiNgay()) {
                            bangLNV.setSoNgayCong(bangLNV.getSoNgayCong() - 2);
                        } else if (ktraNgayCN(ngayLV.getNgayLam())) {
                            bangLNV.setSoNgayCong(bangLNV.getSoNgayCong() - 1);
                        }
                        if (coMat == 0) {
                            bangLNV.setSoNgayNghiKoPhep(bangLNV.getSoNgayNghiKoPhep() + 1);
                        }
                        if (j != -1) {
                            bangCCTC = dsTangCaNV.get(j);
                            bangLNV.setPhat(bangLNV.getPhat() - bangCCTC.getPhat());
                            bangLNV.setSoGioTangCa(bangLNV.getSoGioTangCa() - bangCCTC.getSoGioTangCa());
                            bangChamCongTangCa_DAO.xoaCCTangCaNV(ma);
                        }
                    } else if (bangDDTam.getCoMat() == 1) {
                        if (coMat == 0) {
                            bangLNV.setSoNgayNghiKoPhep(bangLNV.getSoNgayNghiKoPhep() + 1);
                        }
                        if (coMat == 2) {
                            bangLNV.setSoNgayCong(bangLNV.getSoNgayCong() + 1);
                            if (ngayLV.isLoaiNgay()) {
                                bangLNV.setSoNgayCong(bangLNV.getSoNgayCong() + 2);
                            } else if (ktraNgayCN(ngayLV.getNgayLam())) {
                                bangLNV.setSoNgayCong(bangLNV.getSoNgayCong() + 1);
                            }
                        }
                    } else {
                        bangLNV.setSoNgayNghiKoPhep(bangLNV.getSoNgayNghiKoPhep() - 1);
                        if (coMat == 2) {
                            bangLNV.setSoNgayCong(bangLNV.getSoNgayCong() + 1);
                            if (ngayLV.isLoaiNgay()) {
                                bangLNV.setSoNgayCong(bangLNV.getSoNgayCong() + 2);
                            } else if (ktraNgayCN(ngayLV.getNgayLam())) {
                                bangLNV.setSoNgayCong(bangLNV.getSoNgayCong() + 1);
                            }
                        }
                    }
                }
                if (bangDDTam.getPhat() != phat) {
                    bangLNV.setPhat(bangLNV.getPhat() + phat - bangDDTam.getPhat());
                }
                bangLuongNV_DAO.suaBLNV(bangLNV);
            }
            sh_Mes("Sửa thành công", null);
            moKhoaCtrlDD(true);
            btnLuuDD.setEnabled(false);
            btnSuaDD.setText("Sửa(Alt+U)");
            tableDD.clearSelection();
            xoaDLTableDD();
            docDDVaoTableDD();
        }
    }

    private void docDDVaoTableDD() {
        if (dateDD.getSelectedDate() == null) {
            return;
        }
        LocalDate ngayCC = convertToLocalDateViaInstant(dateDD.getSelectedDate().getTime());
        dsNV = bangDiemDanhNV_DAO.getAllDsDDNV(ngayCC);
        dsNVHienThi.clear();
        for (BangDiemDanhNV bangDDNV : dsNV) {
            String coMat = (bangDDNV.getCoMat() == 2 ? "Có mặt" : (bangDDNV.getCoMat() == 1 ? "Có phép" : "Không phép"));
            modelDD.addRow(new Object[]{bangDDNV.getMaCCNV(), bangDDNV.getNhanVien().getMaNV(), bangDDNV.getNhanVien().getTenNV(), coMat, bangDDNV.getPhat() == 0 ? "" : bangDDNV.getPhat(), bangDDNV.getGhiChu()});
            dsNVHienThi.add(bangDDNV);
        }
        NgayLamViec ngayLamViec = ngayLamViec_DAO.timNgayLamViec(ngayCC);
        chkNgayLeDD.setSelected(ngayLamViec == null ? false : ngayLamViec.isLoaiNgay());
    }

    private void docCNVaoTableDD() {
        LocalDate ngayCC = convertToLocalDateViaInstant(dateDD.getSelectedDate().getTime());
//        int caLam = cboCaLamDD.getSelectedIndex() + 1;
        dsNV = bangDiemDanhNV_DAO.getAllDsChuaDDNV(ngayCC);
        dsNVHienThi.clear();
        for (BangDiemDanhNV nv : dsNV) {
            modelDD.addRow(new Object[]{nv.getMaCCNV(), nv.getNhanVien().getMaNV(), nv.getNhanVien().getTenNV(), "Có mặt", "", ""});
            dsNVHienThi.add(nv);
        }
        NgayLamViec ngayLamViec = ngayLamViec_DAO.timNgayLamViec(ngayCC);
        chkNgayLeDD.setSelected(ngayLamViec == null ? false : ngayLamViec.isLoaiNgay());
    }

    private void timNhanVienDD() {
        tableDD.editCellAt(-1, -1);
        xoaDLTableDD();
        String maCCDD = txtTimMaCCDD.getText().trim();
        String tenNV = txtTimTenDD.getText().trim();
        maCCDD = maCCDD.replace("*", ".+");
        maCCDD = maCCDD.replaceAll("\\s\\s+", " ");
        tenNV = tenNV.replace("*", ".+");
        tenNV = tenNV.replaceAll("\\s\\s+", " ");
        if (!maCCDD.matches(".*\\+.*")) {
            maCCDD = ".*" + maCCDD + ".*";
        }
        String regex_maCCDD = String.format("^%s$", maCCDD);
        String regex_tenNV = String.format("^.*%s.*$", tenNV);
        Pattern mypattern_Ma = Pattern.compile(regex_maCCDD, (Pattern.UNICODE_CASE | Pattern.CASE_INSENSITIVE));
        Matcher mymatcher_Ma;
        Pattern mypattern_Ten = Pattern.compile(regex_tenNV, (Pattern.UNICODE_CASE | Pattern.CASE_INSENSITIVE));
        Matcher mymatcher_Ten;
        for (BangDiemDanhNV bangDDNV : dsNVHienThi) {
            mymatcher_Ma = mypattern_Ma.matcher(bangDDNV.getMaCCNV());
            mymatcher_Ten = mypattern_Ten.matcher(bangDDNV.getNhanVien().getTenNV());
            if ((maCCDD.equalsIgnoreCase("") || mymatcher_Ma.matches())
                    && (tenNV.equalsIgnoreCase("") || mymatcher_Ten.matches())) {
                String coMat = (bangDDNV.getCoMat() == 2 ? "Có mặt" : (bangDDNV.getCoMat() == 1 ? "Có phép" : "Không phép"));
                modelDD.addRow(new Object[]{bangDDNV.getMaCCNV(), bangDDNV.getNhanVien().getMaNV(), bangDDNV.getNhanVien().getTenNV(), coMat, bangDDNV.getPhat() == 0 ? "" : bangDDNV.getPhat(), bangDDNV.getGhiChu()});
            }
        }
    }

    private boolean ktraDL_DD() {
        int n = modelDD.getRowCount();
        if (n != 0) {
            for (int i = 0; i < n; i++) {
                if (modelDD.getValueAt(i, 4).toString().trim().equalsIgnoreCase("")) {
                    continue;
                }
                try {
                    if (Double.parseDouble(modelDD.getValueAt(i, 4).toString()) < 0) {
                        sh_Mes("Tiền phạt phải >=0", null);
                        tableDD.editCellAt(i, 4);
                        tableDD.setRowSelectionInterval(i, i);
                        return false;
                    }

                } catch (Exception e) {
                    sh_Mes("Tiền phạt phải nhập số", null);
                    tableDD.editCellAt(i, 4);
                    tableDD.setRowSelectionInterval(i, i);
                    return false;
                }
            }
        }
        return true;
    }

    private void xoaDLTableDD() {
        DefaultTableModel model = (DefaultTableModel) tableDD.getModel();
        model.setRowCount(0);
    }

    private boolean ktraLoaiNgay() {
        LocalDate ngayCC = convertToLocalDateViaInstant(dateDD.getSelectedDate().getTime());
        NgayLamViec ngayLV = ngayLamViec_DAO.timNgayLamViec(ngayCC);
        boolean flag = chkNgayLeDD.isSelected();
        if (ngayLV == null) {
            return true;
        }
        if (ngayLV.isLoaiNgay() != flag) {
            String loai = flag ? "ngày thường" : "ngày lễ";
            String loaiMoi = flag ? "ngày lễ" : "ngày thường";
            int opt;
            if (ngayLV.isLoaiNgay()) {
                opt = JOptionPane.showConfirmDialog(null, "Ngày đang được chấm công đã được chấm là: " + loai
                        + "\nBạn muốn thay đổi ngày đang được chấm công thành: " + loaiMoi,
                        "Xác nhận", JOptionPane.YES_NO_OPTION);

            } else {
                opt = JOptionPane.showConfirmDialog(null, "Ngày đang được chấm công đã được chấm là: " + loai
                        + "\nBạn muốn thay đổi ngày đang được chấm công thành: " + loaiMoi
                        + "\nLưu ý: tất cả giờ tăng cả của nhân viên sẽ bị xóa",
                        "Xác nhận", JOptionPane.YES_NO_OPTION);
            }
            if (opt == JOptionPane.YES_OPTION) {
                capNhatBangChamCongNV(ngayLV);
                ngayLV = new NgayLamViec(ngayCC, flag);
                ngayLamViec_DAO.suaLoaiNgayLam(ngayLV);
                chkNgayLeDD.setSelected(flag);
                return false;
            }
            chkNgayLeDD.setSelected(!flag);
            return false;
        }
        return true;

    }

    private void capNhatBangChamCongNV(NgayLamViec ngayLV) {
        ArrayList<BangLuongNV> dsBangLNV = bangLuongNV_DAO.getAllDsBLNV(ngayLV.getNgayLam().getMonthValue(), ngayLV.getNgayLam().getYear());
        ArrayList<BangLuongCN> dsBangLCN = bangLuongCN_DAO.getAllDsBLCN(ngayLV.getNgayLam().getMonthValue(), ngayLV.getNgayLam().getYear());
        BangLuongNV bangLNV_TAm;
        BangLuongCN bangLCN_TAm;
        dsTangCaNV = bangChamCongTangCa_DAO.getAllDsDD_CCSP(ngayLV.getNgayLam());
        dsCN = bangDiemDanhCN_DAO.getAllDsDDCN(ngayLV.getNgayLam());
        if (ngayLV.isLoaiNgay()) {
            for (BangChamCongTangCa bangTC : dsTangCaNV) {
                if (bangTC.getBangDiemDanhNV().getCoMat() == 2) {
                    String maMoi = String.format("LNV%03d%02d%04d", Integer.parseInt(bangTC.getBangDiemDanhNV().getNhanVien().getMaNV().substring(2)), ngayLV.getNgayLam().getMonthValue(), ngayLV.getNgayLam().getYear());
                    int i = dsBangLNV.indexOf(new BangLuongNV(maMoi));
                    bangLNV_TAm = dsBangLNV.get(i);
                    if (ktraNgayCN(ngayLV.getNgayLam())) {
                        bangLNV_TAm.setSoNgayCong(bangLNV_TAm.getSoNgayCong() - 1);
                    } else {
                        bangLNV_TAm.setSoNgayCong(bangLNV_TAm.getSoNgayCong() - 2);
                    }
                    bangLuongNV_DAO.suaBLNV(bangLNV_TAm);
                    bangChamCongTangCa_DAO.xoaCCTangCaNV(bangTC.getBangDiemDanhNV().getMaCCNV());
                }
            }
            for (BangDiemDanhCN bangDD : dsCN) {
                if (bangDD.getCoMAt() == 2) {
                    String maMoi = String.format("LCN%04d%02d%04d", Integer.parseInt(bangDD.getBangPhanCong().getCongNhan().getMaCN().substring(2)), ngayLV.getNgayLam().getMonthValue(), ngayLV.getNgayLam().getYear());
                    int i = dsBangLCN.indexOf(new BangLuongCN(maMoi));
                    bangLCN_TAm = dsBangLCN.get(i);
                    if (ktraNgayCN(ngayLV.getNgayLam())) {
                        bangLCN_TAm.setSoNgayCong(bangLCN_TAm.getSoNgayCong() - 1);
                    } else {
                        bangLCN_TAm.setSoNgayCong(bangLCN_TAm.getSoNgayCong() - 2);
                    }
                    bangLuongCN_DAO.suaBLCN(bangLCN_TAm);
                }
            }
        } else {
            for (BangChamCongTangCa bangTC : dsTangCaNV) {
                if (bangTC.getBangDiemDanhNV().getCoMat() == 2) {
                    String maMoi = String.format("LNV%03d%02d%04d", Integer.parseInt(bangTC.getBangDiemDanhNV().getNhanVien().getMaNV().substring(2)), ngayLV.getNgayLam().getMonthValue(), ngayLV.getNgayLam().getYear());
                    int i = dsBangLNV.indexOf(new BangLuongNV(maMoi));
                    bangLNV_TAm = dsBangLNV.get(i);
                    if (ktraNgayCN(ngayLV.getNgayLam())) {
                        bangLNV_TAm.setSoNgayCong(bangLNV_TAm.getSoNgayCong() + 1);
                        bangLNV_TAm.setSoGioTangCa(bangLNV_TAm.getSoGioTangCa() - bangTC.getSoGioTangCa() * 2);
                    } else {
                        bangLNV_TAm.setSoNgayCong(bangLNV_TAm.getSoNgayCong() + 2);
                        bangLNV_TAm.setSoGioTangCa(bangLNV_TAm.getSoGioTangCa() - bangTC.getSoGioTangCa());
                    }
                    bangLNV_TAm.setPhat(bangLNV_TAm.getPhat() - bangTC.getPhat());
                    bangLuongNV_DAO.suaBLNV(bangLNV_TAm);
                    bangChamCongTangCa_DAO.xoaCCTangCaNV(bangTC.getBangDiemDanhNV().getMaCCNV());
                }
            }
            for (BangDiemDanhCN bangDD : dsCN) {
                if (bangDD.getCoMAt() == 2) {
                    String maMoi = String.format("LCN%04d%2d%04d", Integer.parseInt(bangDD.getBangPhanCong().getCongNhan().getMaCN().substring(2)), ngayLV.getNgayLam().getMonthValue(), ngayLV.getNgayLam().getYear());
                    int i = dsBangLCN.indexOf(new BangLuongCN(maMoi));
                    bangLCN_TAm = dsBangLCN.get(i);
                    if (ktraNgayCN(ngayLV.getNgayLam())) {
                        bangLCN_TAm.setSoNgayCong(bangLCN_TAm.getSoNgayCong() + 1);
                    } else {
                        bangLCN_TAm.setSoNgayCong(bangLCN_TAm.getSoNgayCong() + 2);
                    }
                    bangLuongCN_DAO.suaBLCN(bangLCN_TAm);
                }
            }
        }
    }

    private boolean ktraNgayDD() {
        LocalDate ngayCC = convertToLocalDateViaInstant(dateDD.getSelectedDate().getTime());
        if (ngayCC.isAfter(LocalDate.now())) {
            sh_Mes("Ngày chấm công không được sau ngày hiện tại", null);
            Calendar ngay = Calendar.getInstance();
            ngay.setTime(convertToDateViaInstant(LocalDate.now()));
            dateDD.setSelectedDate(ngay);
            return false;
        }
        return true;
    }

    private void moKhoaCtrlDD(boolean b) {
        btnCCDD.setEnabled(b);
        btnLuuDD.setEnabled(b);
        btnSuaDD.setEnabled(b);
        btnThoatDD.setEnabled(b);
        chkNgayLeDD.setEnabled(!b);
        tableDD.setEnabled(!b);
    }

//    Chấm công tăng ca
    private void chamCongTC() {
        int n = modelTC.getRowCount();
        if (n != 0) {
            if (!ktraDL_TC()) {
                return;
            }
            String ma;
            int soGioTC;
            double phat;
            String ghiChu;
            String maNV;
            LocalDate ngayCC = convertToLocalDateViaInstant(dateTC.getSelectedDate().getTime());
            NgayLamViec ngayLV = ngayLamViec_DAO.timNgayLamViec(ngayCC);
            for (int i = 0; i < n; i++) {
                ma = modelTC.getValueAt(i, 0).toString();
                maNV = modelTC.getValueAt(i, 1).toString();
                soGioTC = Integer.parseInt(modelTC.getValueAt(i, 3).toString().trim().equals("") ? "0" : modelTC.getValueAt(i, 3).toString().trim());
                phat = Double.parseDouble("0" + modelTC.getValueAt(i, 4).toString());
                ghiChu = modelTC.getValueAt(i, 5).toString();
                bangChamCongTangCa_DAO.chamCongTangCaNV(new BangChamCongTangCa(new BangDiemDanhNV(ma), soGioTC, phat, ghiChu));
                String maLNV = String.format("LNV%03d%02d%04d", Integer.parseInt(maNV.substring(2)), ngayCC.getMonthValue(), ngayCC.getYear());
                BangLuongNV bangLNV = bangLuongNV_DAO.timBangLNV(maLNV);
//                sh_Mes(bangLNV.getSoGioTangCa() + " " + soGioTC, null);
                bangLNV.setSoGioTangCa(bangLNV.getSoGioTangCa() + soGioTC);
                if (ktraNgayCN(ngayCC)) {
                    bangLNV.setSoGioTangCa(bangLNV.getSoGioTangCa() + soGioTC);
                }
                bangLNV.setPhat(bangLNV.getPhat() + phat);
                bangLuongNV_DAO.suaBLNV(bangLNV);
            }
            sh_Mes("Chấm công thành công", null);
            moKhoaCtrlTC(true);
            btnLuuTC.setEnabled(false);
            btnCCTC.setText("Chấm công(Alt+N)");
            xoaDLTableTC();
            docCCTCVaoTableTC();
        }
    }

    private void suaChamCongTC() {
        int n = modelTC.getRowCount();
        if (n != 0) {
            if (!ktraDL_TC()) {
                return;
            }
            String ma;
            int soGioTC;
            double phat;
            String ghiChu;
            String maNV;
            LocalDate ngayCC = convertToLocalDateViaInstant(dateTC.getSelectedDate().getTime());
            NgayLamViec ngayLV = ngayLamViec_DAO.timNgayLamViec(ngayCC);
            for (int i = 0; i < n; i++) {
                ma = modelTC.getValueAt(i, 0).toString();
                soGioTC = Integer.parseInt("0" + modelTC.getValueAt(i, 3).toString());
                phat = Double.parseDouble("0" + modelTC.getValueAt(i, 4).toString());
                ghiChu = modelTC.getValueAt(i, 5).toString();
                bangChamCongTangCa_DAO.suaCCTangCaNV(new BangChamCongTangCa(new BangDiemDanhNV(ma), soGioTC, phat, ghiChu));
                maNV = modelTC.getValueAt(i, 1).toString();
                String maLNV = String.format("LNV%03d%02d%04d", Integer.parseInt(maNV.substring(2)), ngayCC.getMonthValue(), ngayCC.getYear());
                BangLuongNV bangLNV = bangLuongNV_DAO.timBangLNV(maLNV);
                if (dsTangCaNVHienThi.get(i).getSoGioTangCa() != soGioTC) {
                    bangLNV.setSoGioTangCa(bangLNV.getSoGioTangCa() + soGioTC - dsTangCaNVHienThi.get(i).getSoGioTangCa());
                    if (ktraNgayCN(ngayCC)) {
                        bangLNV.setSoGioTangCa(bangLNV.getSoGioTangCa() + soGioTC - dsTangCaNVHienThi.get(i).getSoGioTangCa());
                    }
                }
                if (dsTangCaNVHienThi.get(i).getPhat() != phat) {
                    bangLNV.setPhat(bangLNV.getPhat() + phat - dsTangCaNVHienThi.get(i).getPhat());
                }
                bangLuongNV_DAO.suaBLNV(bangLNV);
            }
            sh_Mes("Sửa thành công", null);
            moKhoaCtrlTC(true);
            btnLuuTC.setEnabled(false);
            btnSuaTC.setText("Sửa(Alt+U)");
            tableTC.clearSelection();
            xoaDLTableTC();
            docCCTCVaoTableTC();
        }
    }

    private void docCCTCVaoTableTC() {
        if (dateTC.getSelectedDate() == null) {
            return;
        }
        LocalDate ngayCC = convertToLocalDateViaInstant(dateTC.getSelectedDate().getTime());
        NgayLamViec ngayLV = ngayLamViec_DAO.timNgayLamViec(ngayCC);
        if (ngayLV != null) {
            if (ngayLV.isLoaiNgay()) {
                sh_Mes("Ngày đang chấm công là ngày lễ nên không được tăng ca", null);
                dateTC.setSelectedDate(null);
                return;
            }
        }
        dsTangCaNV = bangChamCongTangCa_DAO.getAllDsCCSP(ngayCC);
        dsTangCaNVHienThi = dsTangCaNV;
        NhanVien nv;
        for (BangChamCongTangCa bangTC : dsTangCaNV) {
            nv = bangTC.getBangDiemDanhNV().getNhanVien();
            modelTC.addRow(new Object[]{bangTC.getBangDiemDanhNV().getMaCCNV(), nv.getMaNV(), nv.getTenNV(),
                bangTC.getSoGioTangCa() == 0 ? "" : bangTC.getSoGioTangCa(), bangTC.getPhat() == 0 ? "" : bangTC.getPhat(), bangTC.getGhiChu()});
        }
    }

    private void docNVVaoTableTC() {
        if (dateTC.getSelectedDate() == null) {
            return;
        }
        LocalDate ngayCC = convertToLocalDateViaInstant(dateTC.getSelectedDate().getTime());
        if (ngayCC == null) {
            return;
        }
        NgayLamViec ngayLV = ngayLamViec_DAO.timNgayLamViec(ngayCC);
        if (ngayLV != null) {
            if (ngayLV.isLoaiNgay()) {
                sh_Mes("Ngày đang chấm công là ngày lễ nên không được tăng ca", null);
                dateTC.setSelectedDate(null);
                return;
            }
        }
        dsTangCaNV = bangChamCongTangCa_DAO.getAllDsChuaCCTC(ngayCC);
        if (dsTangCaNV == null) {
            return;
        }
//        dsTamCD.clear();
        dsTangCaNVHienThi.clear();
        dsTangCaNVHienThi = dsTangCaNV;
        for (BangChamCongTangCa bangDDNV : dsTangCaNV) {
            modelTC.addRow(new Object[]{bangDDNV.getBangDiemDanhNV().getMaCCNV(), bangDDNV.getBangDiemDanhNV().getNhanVien().getMaNV(),
                bangDDNV.getBangDiemDanhNV().getNhanVien().getTenNV(), "", "", ""});
        }
    }

    private void timNhanVienTC() {
        tableTC.editCellAt(-1, -1);
        xoaDLTableTC();
        String maCCDD = txtTimMaCCTC.getText().trim();
        String tenNV = txtTimTenTC.getText().trim();
        maCCDD = maCCDD.replace("*", ".+");
        maCCDD = maCCDD.replaceAll("\\s\\s+", " ");
        tenNV = tenNV.replace("*", ".+");
        tenNV = tenNV.replaceAll("\\s\\s+", " ");
        if (!maCCDD.matches(".*\\+.*")) {
            maCCDD = ".*" + maCCDD + ".*";
        }
        String regex_maCCDD = String.format("^%s$", maCCDD);
        String regex_tenNV = String.format("^.*%s.*$", tenNV);
        Pattern mypattern_Ma = Pattern.compile(regex_maCCDD, (Pattern.UNICODE_CASE | Pattern.CASE_INSENSITIVE));
        Matcher mymatcher_Ma;
        Pattern mypattern_Ten = Pattern.compile(regex_tenNV, (Pattern.UNICODE_CASE | Pattern.CASE_INSENSITIVE));
        Matcher mymatcher_Ten;
        NhanVien nv;
        for (BangChamCongTangCa bangTC : dsTangCaNVHienThi) {
            nv = bangTC.getBangDiemDanhNV().getNhanVien();
            mymatcher_Ma = mypattern_Ma.matcher(bangTC.getBangDiemDanhNV().getMaCCNV());
            mymatcher_Ten = mypattern_Ten.matcher(nv.getTenNV());
            if ((maCCDD.equalsIgnoreCase("") || mymatcher_Ma.matches()) && (tenNV.equalsIgnoreCase("") || mymatcher_Ten.matches())) {
                modelTC.addRow(new Object[]{bangTC.getBangDiemDanhNV().getMaCCNV(), nv.getMaNV(), nv.getTenNV(),
                    bangTC.getSoGioTangCa() == 0 ? "" : bangTC.getSoGioTangCa(), bangTC.getPhat() == 0 ? "" : bangTC.getPhat(), bangTC.getGhiChu()});
            }
        }
    }

    private boolean ktraDL_TC() {//**********
        int n = modelTC.getRowCount();
        if (n != 0) {
            String soGio_S;
            int soGio;
            String phat_S;
            for (int i = 0; i < n; i++) {
                soGio_S = modelTC.getValueAt(i, 3).toString();
                if (soGio_S.trim().equals("")) {
                    soGio_S = "0";
                }
                try {
                    soGio = Integer.parseInt(soGio_S);
                    if (soGio < 0 || soGio > 4) {
                        sh_Mes("Số giờ tăng ca phải >= 0 và <=4", null);
                        tableTC.editCellAt(i, 3);
                        tableTC.setRowSelectionInterval(i, i);
                        return false;
                    }
                } catch (Exception e) {
                    sh_Mes("Số giờ tăng ca phải nhập số nguyên", null);
                    tableTC.editCellAt(i, 3);
                    tableTC.setRowSelectionInterval(i, i);
                    return false;
                }

                phat_S = modelTC.getValueAt(i, 4).toString();
                if (phat_S.trim().equalsIgnoreCase("")) {
                    continue;
                }
                try {
                    if (Double.parseDouble(phat_S) < 0) {
                        sh_Mes("Tiền phạt phải >=0", null);
                        tableTC.editCellAt(i, 4);
                        tableTC.setRowSelectionInterval(i, i);
                        return false;
                    }

                } catch (Exception e) {
                    sh_Mes("Tiền phạt phải nhập số", null);
                    tableTC.editCellAt(i, 4);
                    tableTC.setRowSelectionInterval(i, i);
                    return false;
                }
            }
        }
        return true;
    }

    private boolean ktraNgayTC() {
        if (dateTC.getSelectedDate() == null) {
            return false;
        }
        LocalDate ngayCC = convertToLocalDateViaInstant(dateTC.getSelectedDate().getTime());
        if (ngayCC.isAfter(LocalDate.now())) {
            sh_Mes("Ngày chấm công không được sau ngày hiện tại", null);
            Calendar ngay = Calendar.getInstance();
            ngay.setTime(convertToDateViaInstant(LocalDate.now()));
            dateTC.setSelectedDate(ngay);
            return false;
        }
        return true;
    }

    private void xoaDLTableTC() {
        DefaultTableModel model = (DefaultTableModel) tableTC.getModel();
        model.setRowCount(0);
    }

    private void moKhoaCtrlTC(boolean b) {
        btnCCTC.setEnabled(b);
        btnLuuTC.setEnabled(b);
        btnSuaTC.setEnabled(b);
        btnThoatTC.setEnabled(b);
        tableTC.setEnabled(!b);
    }

    public LocalDate convertToLocalDateViaInstant(Date dateToConvert) {
        return dateToConvert.toInstant()
                .atZone(ZoneId.systemDefault())
                .toLocalDate();
    }

    public LocalDate convertToLocalDateViaInstant(java.util.Date dateToConvert) {
        return dateToConvert.toInstant()
                .atZone(ZoneId.systemDefault())
                .toLocalDate();
    }

    public java.util.Date convertToDateViaInstant(LocalDate date) {
        return Date.from(date.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant());
    }

    public boolean ktraNgayCN(LocalDate ngay) {
        if (ngay.getDayOfWeek().getValue() == DayOfWeek.SUNDAY.getValue()) {
            return true;
        }
        return false;
    }

    private void sh_Mes(String mes, JTextField txt) {
        JOptionPane.showMessageDialog(null, mes);
        if (txt == null) {
            return;
        }
        txt.requestFocus();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCCDD;
    private javax.swing.JButton btnCCTC;
    private javax.swing.JButton btnLuuDD;
    private javax.swing.JButton btnLuuTC;
    private javax.swing.JButton btnSuaDD;
    private javax.swing.JButton btnSuaTC;
    private javax.swing.JButton btnThoatDD;
    private javax.swing.JButton btnThoatTC;
    private javax.swing.JCheckBox chkNgayLeDD;
    private datechooser.beans.DateChooserCombo dateDD;
    private datechooser.beans.DateChooserCombo dateTC;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lbNgaylChamCongDD;
    private javax.swing.JLabel lblMaChamCongDD;
    private javax.swing.JLabel lblMaChamCongTC;
    private javax.swing.JLabel lblNgayChamCongTC;
    private javax.swing.JLabel lblTimTenNVDD;
    private javax.swing.JLabel lblTimTenTC;
    private javax.swing.JPanel pnMid;
    private javax.swing.JPanel pnMidTC;
    private javax.swing.JPanel pnTop;
    private javax.swing.JPanel pnTopTC;
    private javax.swing.JScrollPane scrChamCongDD;
    private javax.swing.JScrollPane scrChamCongTC;
    private javax.swing.JPanel tabChamCongDiemDanh;
    private javax.swing.JPanel tabChamCongTangCa;
    private javax.swing.JTabbedPane tabPane;
    private javax.swing.JTable tableDD;
    private javax.swing.JTable tableTC;
    private javax.swing.JTextField txtTimMaCCDD;
    private javax.swing.JTextField txtTimMaCCTC;
    private javax.swing.JTextField txtTimTenDD;
    private javax.swing.JTextField txtTimTenTC;
    // End of variables declaration//GEN-END:variables

}
